{"version":3,"sources":["firebase.js","MessageContainer.styles.js","MessageInput.styles.js","MessageInput.js","Messages.styles.js","Messages.js","Scroll.js","MessageContainer.js","UnreadCircle.svg","Inbox.styles.js","Inbox.js","InboxContainer.styles.js","InboxContainer.js","NewMessage.styles.js","NewMessage.js","App.styles.js","App.js","serviceWorker.js","Index.styles.js","index.js"],"names":["provider","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","GoogleAuthProvider","MessageContainerStyles","styled","div","MessageInputContainer","MessageInputArea","textarea","MessageInput","button","state","message","submitFunction","messageRef","messageID","otherUserID","otherUserDisplayName","otherUserPhotoURL","otherUserEmail","userIndex","props","allUserEmails","indexOf","newMessageOtherUserEmail","database","ref","once","snapshot","userInfo","val","userInfoArray","Object","keys","name","photoURL","email","userID","currentUser","addMessageID","uid","addMessageIDToOtherUser","currentUserInfo","messages","length","newMessageRoute","itemRef","messageInfo","lastMessage","Date","now","user1Photo","user2Photo","user1Email","user2Email","user1","user2","displayName","push","then","collectionRef","path","pieces_","pop","getCurrentID","addMessageIDRef","update","collectionID","getMessages","currentChatID","user","usernameState","read","document","getElementById","value","test","messageRefValues","values","userMessageIDs","id","setState","submit","e","keyCode","shiftKey","preventDefault","handleMessageChange","target","clearUnread","messageKeys","messageValues","reverse","splice","valueIndex","className","onClick","onChange","this","placeholder","addEventListener","Component","UserMessageStyle","isCurrentUser","NewMessageHeader","MessagesContainer","Messages","map","index","key","itemId","Scroll","style","overflow","border","height","display","flexDirection","children","MessageContainer","removeItem","usernameFunc","username","handleChange","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","cx","cy","r","fill","_ref","svgRef","title","width","ForwardRef","forwardRef","InboxContainer","isCurrentThread","ImageContainer","ProfileImage","img","InboxUser","InboxMessage","UndreadContainer","UnreadStyles","UnreadCircle","compareLastMessageTimestamp","a","b","comparison","Inbox","mostRecentMessage","allInfo","messageIDs","unreadMessages","unreadCount","getMessageSummaries","on","messagesSnapshot","sort","messagesArray","allUserIDs","finalInfoObject","loopIndex","messageSummary","infoObject","unreadMessage","focus","isFocus","activeElement","inboxToMessages","otherUserInfo","split","slice","scrollIntoView","getUserEmailsAndMessageIDsFromInbox","inboxToMessagesAsync","runFunction","alt","src","unread","InboxContainerStyle","NewMessageButton","NewMessageInput","input","NewMessageContainer","NewMessage","isUserExist","handleEmail","createNewMessage","emailIndex","allCurrentUserEmails","allCurrentUserIDs","clearMessages","getNewMessageEmail","AppContainer","LogOutButton","LogInButton","InboxMessageContainer","AppTitle","App","stayLoggedIn","onAuthStateChanged","getUserInfo","users","usersArray","userId","emails","IDs","addUserData","userData","dateCreated","set","remove","logout","signOut","items","newState","item","ref_","login","signInWithPopup","result","counter","route","Boolean","window","location","hostname","match","IndexContainer","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2815759c.chunk.js","sourcesContent":["import firebase from \"firebase\"\n\nconst config = {\n    apiKey: \"AIzaSyDVflBKJPhm5bNZfYL5yoqT66NfyiPQgT0\",\n    authDomain: \"messages-598f6.firebaseapp.com\",\n    databaseURL: \"https://messages-598f6.firebaseio.com\",\n    projectId: \"messages-598f6\",\n    storageBucket: \"messages-598f6.appspot.com\",\n    messagingSenderId: \"1044285096751\",\n    appId: \"1:1044285096751:web:f00b017ec43ce7dd2557da\",\n    measurementId: \"G-KRSD66CD2T\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(config)\nconst db = firebaseApp.firestore()\n\nexport { db }\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\n\nexport default firebase","import styled from \"styled-components\"\n\nexport const MessageContainerStyles = styled.div`\n    border: 5px solid rgb(30,30,30);\n    height: 83vh;\n    width: 50vw;\n`","import styled from 'styled-components'\n\nexport const MessageInputContainer = styled.div`\n    margin-top: 10px;\n    display: flex;\n    width: 100%;\n`\n \nexport const MessageInputArea = styled.textarea`\n    height: 5vh;\n    width: 93%;\n    background-color: grey;\n    border: none;\n    color: white;\n`\n \nexport const MessageInputButton = styled.button`\n    width: 7%;\n`","import React, { Component } from \"react\"\nimport firebase from \"firebase\"\nimport { MessageInputContainer, MessageInputArea } from './MessageInput.styles'\n\nclass MessageInput extends Component {\n\n    state = {\n        message: ''\n    }\n\n    submitFunction = () => {\n        let messageRef\n        let messageID\n        const userIndex = this.props.allUserEmails.indexOf(this.props.newMessageOtherUserEmail)\n        let otherUserID\n        let otherUserDisplayName\n        let otherUserPhotoURL\n        let otherUserEmail\n        const userIdRef = firebase.database().ref('users')\n        userIdRef.once('value', (snapshot)=> {\n            const userInfo = snapshot.val()\n            const userInfoArray = Object.keys(userInfo)\n            otherUserID = userInfoArray[userIndex]\n            if(userIndex!==-1){\n                otherUserDisplayName = userInfo[otherUserID].name\n                otherUserPhotoURL = userInfo[otherUserID].photoURL\n                otherUserEmail = userInfo[otherUserID].email\n            }\n        })\n        const userID = firebase.auth().currentUser\n        const addMessageID = firebase.database().ref(`users/${userID.uid}/messages`)\n        let addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n        const currentUserInfo = firebase.auth().currentUser\n        if(this.props.messages.length===0){\n            this.props.newMessageRoute()\n            const itemRef = firebase.database().ref(\"messages\")\n            const messageInfo = {\n                lastMessage: Date.now(),\n                user1Photo: otherUserPhotoURL,\n                user2Photo: currentUserInfo.photoURL,\n                user1Email: otherUserEmail,\n                user2Email: currentUserInfo.email,\n                user1: otherUserDisplayName,\n                user2: currentUserInfo.displayName,\n            }\n            itemRef.push(messageInfo)\n            .then(function(collectionRef){\n                messageID = collectionRef.path.pieces_.pop()\n            }).then(()=> {\n                this.props.getCurrentID(messageID)\n                \n                addMessageID.push({\n                    messageID: messageID,\n                    lastMessage: Date.now(),\n                }).then(function(addMessageIDRef) {\n                    const addCollectionID = firebase.database().ref(`users/${userID.uid}/messages/${addMessageIDRef.path.pieces_[3]}`)\n                    addCollectionID.update({\n                        collectionID: addMessageIDRef.path.pieces_[3]\n                    })\n                })\n                addMessageIDToOtherUser.push({\n                    messageID: messageID,\n                    lastMessage: Date.now(),\n                }).then(function(addMessageIDRef) {\n                    const addCollectionIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages/${addMessageIDRef.path.pieces_[3]}`) \n                    addCollectionIDToOtherUser.update({\n                        collectionID: addMessageIDRef.path.pieces_[3]\n                    })\n                })\n                messageRef = firebase.database().ref(`messages/${messageID}`)\n                this.props.getMessages(this.props.currentChatID)\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.email,\n                }\n                messageRef.push(message)\n                messageRef.update({\n                    lastMessage: Date.now()\n                })\n                document.getElementById(\"message-input\").value=\"\"\n            })\n        }else{\n            // addMessageID.once('value', (snapshot)=> {\n            //     console.log(snapshot.val())\n\n            // })\n            const noEmptyMessage = /^(?!\\s*$).+/\n            if(noEmptyMessage.test(this.state.message)){\n                messageRef = firebase.database().ref(`messages/${this.props.currentChatID}`)\n                messageRef.once('value', (snapshot)=> {\n                    let messageRefValues = snapshot.val()\n                    messageRefValues = Object.values(messageRefValues)\n                    if(this.props.email!==messageRefValues[messageRefValues.length-2]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-2]\n                    }else if (this.props.email!==messageRefValues[messageRefValues.length-5]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-5]\n                    }\n                })\n                this.props.getMessages(this.props.currentChatID)\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.email,\n                }\n                messageRef.push(message)\n                messageRef.update({\n                    lastMessage: Date.now()\n                })\n                const messageRefTest = firebase.database().ref('users')\n                messageRefTest.once('value', (snapshot)=> {\n                    for (let userID in snapshot.val()){\n                        if(snapshot.val()[userID].email===otherUserEmail){\n                            otherUserID = userID\n                        }\n                    }\n                })\n                addMessageID.once('value', (snapshot)=> {\n                    const userMessageIDs = snapshot.val()\n                    for (let id in userMessageIDs){\n                        if (userMessageIDs[id].messageID  === this.props.currentChatID){\n                            const idTimestampRef = firebase.database().ref(`users/${userID.uid}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n                addMessageIDToOtherUser.once('value', (snapshot)=> {\n                    for (let id in snapshot.val()){\n                        if (snapshot.val()[id].messageID  === this.props.currentChatID){\n                            const idTimestampRef = firebase.database().ref(`users/${otherUserID}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                this.setState({\n                    message: ''\n                })\n                document.getElementById(\"message-input\").value=\"\"\n            }\n        }\n    }\n\n    submit = (e) => {\n        if (e.keyCode){\n            if (e.keyCode===13 && !e.shiftKey){\n                e.preventDefault()\n                this.submitFunction()\n            }\n        }else{\n            this.submitFunction()\n        }\n    }\n\n    handleMessageChange = (e) => {\n        this.setState({\n          message: e.target.value\n        })\n      }\n\n    clearUnread = (messageID) => {\n        if(this.props.messages.length>0){\n            const messageRef = firebase.database().ref(`messages/${messageID}`)\n            messageRef.once('value', (snapshot) => {\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,7)\n                messageValues.reverse().splice(0,7)\n                let valueIndex = 0\n                for (let value of messageValues) {\n                    if(value.read===false){\n                        if(value.email !== this.props.email){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[valueIndex]}`)\n                            firebaseMessageRef.update({\n                                read: true\n                            })\n                            valueIndex++\n                        }\n                    }else{\n                        break\n                    }\n                }\n            })\n        }\n    }\n\n    render(){\n        return(\n            <MessageInputContainer>\n                {/* <input onChange={props.username} placeholder=\"enter username\"></input> */}\n                <MessageInputArea className=\"br3\" onClick={()=>this.clearUnread(this.props.currentChatID)} id=\"message-input\" onChange={this.handleMessageChange} placeholder=\"enter message\"></MessageInputArea>\n                <button onClick={this.submit}>Send</button>\n            </MessageInputContainer>\n        ) \n    }\n    componentDidMount(){\n        document.addEventListener(\"keypress\", this.submit)\n    }\n}\n\nexport default MessageInput","import styled from \"styled-components\"\n\nexport const UserMessageStyle = styled.div`\n    // padding-left: ${props => (props.isCurrentUser ? \"40vw\" : \"10px\")};\n    color: white;\n    background-color: ${props => (props.isCurrentUser ? \"rgb(45, 45, 45)\" : \"rgb(80, 80, 80)\")};\n    border: rgb(20,20,20) solid 1px;\n    max-width: 45%;\n    min-width: 15%;\n    align-self: ${props => (props.isCurrentUser ? \"flex-end\" : \"flex-start\")};\n    word-wrap:break-word;\n`\n\nexport const NewMessageHeader = styled.div`\n    color: white;\n`\n\nexport const MessagesContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`","import React from \"react\"\nimport { UserMessageStyle, NewMessageHeader, MessagesContainer } from  \"./Messages.styles\"\nconst Messages = (props) => {\n    return(\n        <MessagesContainer>\n            {props.currentChatID===\"NEW MESSAGE\" ? \n                <NewMessageHeader>\n                    Send new message to: {props.newMessageOtherUserEmail}\n                </NewMessageHeader>\n                :\n                null\n            }\n            {props.messages.map((message, index)=> {\n                return(\n                    message.message ? \n                    <UserMessageStyle key={index} isCurrentUser={props.email===message.email ? true : false} className={props.user===message.user ? \"current-user  grow br3 pa3 ma1 dib bw2 shadow-5\" : \"other-user grow br3 pa3 ma2 dib bw2 shadow-5\"}>\n                        {message.itemId!==\"lastMessage\"&&message.itemId!==\"user1\"&&message.itemId!==\"user2\"&&message.itemId!==\"user2Photo\"&&message.itemId!==\"user1Photo\"&&message.itemId!==\"user2Email\"&&message.itemId!==\"user1Email\" ? \n                        <div>\n                            {/* {message.user} */}\n                            {message.message}\n                            {/* <button onClick={()=>props.removeItem(message.itemId)}>remove</button> */}\n                            <br></br>\n                        </div>\n                        :\n                        null\n                        }\n                    </UserMessageStyle>\n                    : \n                    null\n                )\n            })}\n        </MessagesContainer>\n    )\n}\n\nexport default Messages","import React from \"react\"\n\nconst Scroll = (props) => {\n    return(\n        // <div style={{overflow: \"scroll\", border: \"5px black\", height: props.height, display:\"flex\", flexDirection:\"column-reverse\"}}>\n        <div style={{overflow: \"scroll\", border: \"5px black\", height: props.height, display:props.display, flexDirection:props.flexDirection}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from \"react\"\nimport \"./MessageContainer.styles.js\"\nimport MessageInput from \"./MessageInput\"\nimport Messages from \"./Messages\"\nimport Scroll from \"./Scroll\" \nimport { MessageContainerStyles } from \"./MessageContainer.styles\"\n\nclass MessageContainer extends Component {\n    render() {\n        return(\n            <div>\n                <MessageContainerStyles className=\"message-container\">\n                    {/* <Scroll height=\"86vh\" display=\"flex\" flexDirection={this.props.currentChatID===\"NEW MESSAGE\" ? \"row\" : \"column-reverse\"}> */}\n                    <Scroll height=\"81vh\">\n                        <Messages \n                        email={this.props.email}\n                        newMessageOtherUserEmail={this.props.newMessageOtherUserEmail}\n                        currentChatID={this.props.currentChatID}\n                        removeItem={this.props.removeItem} \n                        messages={this.props.messages} \n                        user={this.props.usernameState}\n                        />\n                        <div id=\"scroll-here\"></div>\n                    </Scroll>\n                </MessageContainerStyles>\n                    {this.props.currentChatID!==null ? \n                    <MessageInput \n                    getCurrentID={this.props.getCurrentID}\n                    newMessageRoute={this.props.newMessageRoute}\n                    allUserEmails={this.props.allUserEmails}\n                    newMessageOtherUserEmail={this.props.newMessageOtherUserEmail}\n                    email={this.props.email}\n                    usernameState={this.props.usernameState}\n                    message={this.props.message}\n                    currentChatID={this.props.currentChatID} \n                    getMessages={this.props.getMessages} \n                    usernameFunc={this.props.username} \n                    handleChange={this.props.handleChange} \n                    submit={this.props.submit}\n                    messages={this.props.messages}\n                    />\n                    :\n                    null\n                    }  \n            </div>\n        )\n    }\n}\n\nexport default MessageContainer","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 20,\n  cy: 20,\n  r: 16,\n  fill: \"rgb(26, 26, 26)\"\n});\n\nvar SvgUnreadCircle = function SvgUnreadCircle(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 40,\n    width: 40,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgUnreadCircle, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/UnreadCircle.8c406109.svg\";\nexport { ForwardRef as ReactComponent };","import styled from \"styled-components\"\nimport { ReactComponent as UnreadCircle } from './UnreadCircle.svg'\n\nexport const InboxContainer = styled.div`\n    height: 90px;\n    cursor: pointer;\n    border: solid rgb(5,5,5) 1px;\n    background-color: ${props=>(props.isCurrentThread ? \"rgb(100,100,100) \" : \"rgb(40,40,40)\")} ;\n    color: white;\n    display: flex;\n    width: 97%;\n`\n\nexport const ImageContainer = styled.div`\n    width: 25%;\n    float: left;\n    align-items: center;\n`\n\nexport const ProfileImage = styled.img`\n    padding-left: 10px;\n    height: 60px;\n    width: 60px;\n`\n\nexport const MessageContainer = styled.div`\n    float: left;\n    width: 50%;\n    height: 50%;\n`\n\nexport const InboxUser = styled.div`\n    font-size: 20px;\n`\n\nexport const InboxMessage = styled.div`\n    word-wrap:break-word;\n`\n\n\nexport const UndreadContainer = styled.div`\n    float: right;\n    width: 25%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nexport const UnreadCircleIcon = styled(UnreadCircle)`\n\n`\n\nexport const UnreadStyles = styled.div`\n    position: absolute;\n`","import React, { Component } from \"react\"\nimport firebase from \"./firebase\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport { \n    InboxMessage, \n    ProfileImage, \n    InboxContainer, \n    UnreadStyles,\n    UndreadContainer, \n    ImageContainer,\n    MessageContainer,\n    InboxUser,\n    // UnreadCircleStyle,\n} from \"./Inbox.styles\"\nimport { ReactComponent as UnreadCircle } from \"./UnreadCircle.svg\"\n\nconst compareLastMessageTimestamp = (a, b) => {\n    let comparison = 0\n    if (a.lastMessage < b.lastMessage){\n        comparison = 1\n    } else if (a.lastMessage > b.lastMessage){\n        comparison = -1\n    } \n    return comparison\n}\n\nclass Inbox extends Component {\n\n    state = {\n        messages: [],\n        mostRecentMessage: \"\",\n        otherUserDisplayName: \"\",\n        otherUserPhotoURL: \"\",\n        allInfo: [],\n        messageIDs: [],\n        unreadMessages: 0,\n        unreadCount: 0,\n    }\n\n    getMessageSummaries = () => {\n        const userID = firebase.auth().currentUser\n        const messagesRef = firebase.database().ref(`users/${userID.uid}`)\n        messagesRef.on('value', (snapshot)=> {\n            const messagesSnapshot = snapshot.val()\n            let messageInfo = Object.values(messagesSnapshot.messages)\n            messageInfo = messageInfo.sort(compareLastMessageTimestamp)\n            if(messagesSnapshot){\n                if(messagesSnapshot.messages){\n                    let messagesArray = []\n                    let allUserIDs = []\n                    let allUserEmails = []\n                    let finalInfoObject = {}\n                    let loopIndex = 0\n                    for (let message of messageInfo){\n                        const messageSummary = firebase.database().ref(`messages/${message.messageID}`)\n                        let lastMessage \n                        messageSummary.on('value', (snapshot)=> {\n                            if(snapshot.val()){\n                                let infoObject = {}\n                                lastMessage = Object.values(snapshot.val())\n                                let unreadMessages = Object.values(snapshot.val())\n                                unreadMessages.reverse().splice(0,7)\n                                let unreadCount = 0\n                                for (let unreadMessage of unreadMessages) {\n                                    if(unreadMessage.read===false){\n                                        if(unreadMessage.email!==userID.email){\n                                            const focus = document.getElementById('message-input')\n                                            const isFocus = document.activeElement===focus\n                                            if(!isFocus){\n                                                unreadCount++\n                                            }else if(isFocus){\n                                                this.inboxToMessages(this.props.currentChatID)\n                                            }\n                                        }\n                                    }else{\n                                        break\n                                    }\n                                }\n                                const otherUserInfo = Object.values(snapshot.val())\n                                let otherUserDisplayName \n                                let otherUserPhotoURL\n                                if (otherUserInfo[otherUserInfo.length-3]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-6]\n                                } else if (otherUserInfo[otherUserInfo.length-6]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-3]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-1]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-4]\n                                } else if(otherUserInfo[otherUserInfo.length-4]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-1]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-2]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-5])\n                                } else if(otherUserInfo[otherUserInfo.length-5]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-2])\n                                }\n                                lastMessage = lastMessage[lastMessage.length-8]\n                                if(lastMessage){\n                                    lastMessage = Object.values(lastMessage)[1]\n                                }\n                                if(lastMessage.length+lastMessage.split(\" \").length > 55){\n                                    lastMessage = lastMessage.slice(0, 53)\n                                    lastMessage += \"...\"\n                                }\n                                allUserIDs.push(message.messageID)\n                                infoObject[\"message\"] = lastMessage\n                                infoObject[\"photoURL\"] = otherUserPhotoURL\n                                infoObject[\"displayName\"] = otherUserDisplayName\n                                infoObject[\"unread\"] = unreadCount\n                                finalInfoObject[message.messageID] = infoObject\n                                this.setState({\n                                    allInfo: finalInfoObject\n                                })\n                            }\n                            document.getElementById('scroll-here').scrollIntoView();\n                        })\n                        this.props.getUserEmailsAndMessageIDsFromInbox(allUserEmails, allUserIDs)\n                        if(loopIndex===0){\n                            if(this.props.currentChatID===null){\n                                this.props.newMessageRoute(message.messageID)\n                            }\n                        }\n                        loopIndex++\n                        messagesArray.push(message.messageID)\n                    }\n                    this.setState({\n                        messages: messagesArray,\n                    })\n                }\n            }\n        })\n    } \n\n    test = () => {\n        // for (let message in this.state.allInfo){\n        //     console.log(this.state.allInfo[message])\n        // }\n        document.getElementById('scroll-here').scrollIntoView();\n    }\n\n    inboxToMessages = (messageID) => {\n        this.props.newMessageRoute(messageID)\n        const messageRef = firebase.database().ref(`messages/${messageID}`)\n        messageRef.once('value', (snapshot) => {\n            let messages = snapshot.val()\n            let messageKeys = Object.keys(messages)\n            let messageValues = Object.values(messages)\n            messageKeys.reverse().splice(0,7)\n            messageValues.reverse().splice(0,7)\n            messageValues.map((value,index) => {\n                if(value.read===false){\n                    if(value.email!==this.props.email){\n                        // if(messageID!==this.props.currentChatID){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[index]}`)\n                            firebaseMessageRef.update({\n                                read: true\n                            })\n                        // }\n                    }\n                }\n                return null\n            })\n            document.getElementById('scroll-here').scrollIntoView();\n        })\n    }\n\n    inboxToMessagesAsync = (messageID) => {\n        const runFunction = async () => {\n            await this.inboxToMessages(messageID)\n            await document.getElementById('scroll-here').scrollIntoView();\n        }\n        runFunction()\n    } \n\n\n\n    componentDidMount(){\n        this.getMessageSummaries()\n    }\n    \n    render() {\n        return(\n            <div>\n                {/* <button onClick={(this.test)}>push</button> */}\n                {this.state.messages.length > 0 \n                ?\n                Object.values(this.state.allInfo).map((message, index)=> {\n                    return(\n                        <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatID===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessagesAsync(this.state.messages[index])} key={index}>\n                        {/* <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatID===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessages(this.state.messages[index])} key={index}> */}\n                            <ImageContainer>\n                                <ProfileImage alt=\"user profile\" src={message.photoURL}></ProfileImage>\n                            </ImageContainer>\n                            <MessageContainer>\n                                <InboxUser>{message.displayName}</InboxUser>\n                                <InboxMessage >{message.message}</InboxMessage>\n                            </MessageContainer>\n                            {message.unread > 0 ? \n                                // <div style={{width: '25%'}}>\n                                    <UndreadContainer>\n                                        <UnreadCircle></UnreadCircle>\n                                        <UnreadStyles>{message.unread}</UnreadStyles>\n                                    </UndreadContainer>\n                                // </div>\n                            :\n                            null\n                            }\n                        </InboxContainer>\n                        )\n                })\n                :\n                null\n                }\n            </div>\n        )\n    }\n}\n\nexport default Inbox","import styled from \"styled-components\"\n\nexport const InboxContainerStyle = styled.div`\nwidth: 30vw;\nheight: 91vh; \n`","import React from \"react\"\nimport Inbox from \"./Inbox\"\nimport { InboxContainerStyle } from \"./InboxContainer.styles\"\nimport Scroll from \"./Scroll\"\n\nconst InboxContainer = (props) => {\n    return(\n        <Scroll height=\"91vh\">\n            <InboxContainerStyle>\n                <Inbox \n                getCurrentID={props.getCurrentID}\n                email={props.email}\n                currentChatID={props.currentChatID}\n                getUserEmailsAndMessageIDsFromInbox={props.getUserEmailsAndMessageIDsFromInbox}\n                newMessageRoute={props.newMessageRoute}\n                />\n            </InboxContainerStyle>\n        </Scroll>\n    )\n}\n\nexport default InboxContainer","import styled from \"styled-components\"\n\nexport const NewMessageButton = styled.button`\n    height: 35px;\n    width: 3vw;\n    cursor: pointer;\n    background-color: rgb(50,50,50);\n    color: white;\n    border: none;\n`\n\nexport const NewMessageInput = styled.input`\n    height: 30px;\n    width: 200px;\n    cursor: pointer;\n    background-color: gray;\n    color: white;\n    border: none;\n    margin: 0 5px 0 10px;\n`\n\nexport const NewMessageContainer = styled.div`\n    color: white;\n`","import React, { Component } from \"react\"\n// import firebase from \"./firebase\"\nimport { NewMessageButton, NewMessageInput, NewMessageContainer } from \"./NewMessage.styles\"\n\nclass NewMessage extends Component {\n\n    state = {\n        email: \"\",\n        isUserExist: \"\",\n    }\n\n    handleEmail = (e) => {\n        this.setState({\n            email: e.target.value\n        })\n    }\n\n    createNewMessage = () => {\n        if(this.state.email.length>0){\n            const emailIndex = this.props.allCurrentUserEmails.indexOf(this.state.email)\n            if(emailIndex!==-1){\n                this.props.getMessages(this.props.allCurrentUserIDs[emailIndex])\n                this.props.getCurrentID(this.props.allCurrentUserIDs[emailIndex])\n                if(this.state.isUserExist===\"user does not exist\"){\n                    this.setState({\n                        isUserExist: \"\",\n                    })\n                }\n            }else{\n                for(let email of this.props.allUserEmails) {\n                    if(this.state.email===this.props.email){\n                        break\n                    }else if(email===this.state.email){\n                        this.props.clearMessages()\n                        this.props.getCurrentID(\"NEW MESSAGE\")\n                        this.props.getNewMessageEmail(this.state.email)\n                        this.setState({\n                            isUserExist: \"\"\n                        })\n                        break\n                    }else{\n                        this.setState({\n                            isUserExist: \"user does not exist\"\n                        })\n                    }\n                }\n            }\n            document.getElementById(\"email-input\").value=\"\"\n        }\n    }\n\n    render() {\n        return(\n            <NewMessageContainer>\n                {/* New Message */}\n                <NewMessageInput className=\"br2\" id=\"email-input\" onChange={this.handleEmail} placeholder=\"enter email\"></NewMessageInput>\n                <NewMessageButton className=\"br2\" onClick={this.createNewMessage}>+</NewMessageButton>\n                <div>{this.state.isUserExist}</div>\n            </NewMessageContainer>\n        )\n    }\n} \n\nexport default NewMessage ","import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n    width: 100%;\n    // position: relative;\n`\n\nexport const LogOutButton = styled.button`\n    border: none;\n    height: 30px;\n    width: 160px;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(80, 80, 80);\n    margin: 5px 5px 5px 10px;\n`\n\nexport const LogInButton = styled.button`\n    border: none;\n    height: 5vh;\n    width: 20vw;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(18, 208, 255);\n    position: absolute;\n    top: 55%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-family: 'Lato';\n    font-size: 2vw;\n    &:hover {\n        background-color: green;\n    }\n`\n\nexport const InboxMessageContainer = styled.div`\n    display: flex;\n`\n\nexport const AppTitle = styled.div`\n    font-size: 6vw;\n    color: white;\n    font-family: 'Lato';\n    position: absolute;\n    top: 45%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`","import React, { Component } from 'react';\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport firebase, {auth, provider} from \"./firebase\"\nimport MessageContainer from \"./MessageContainer\"\nimport InboxContainer from \"./InboxContainer\"\nimport NewMessage from \"./NewMessage\"\nimport { AppContainer, \n  LogInButton, \n  InboxMessageContainer, \n  AppTitle,\n  LogOutButton\n  } from \"./App.styles\"\n\n\nclass App extends Component {\n  \n  state = {\n    messages: [],\n    // message: \"\",\n    username: \"\",\n    user: null,\n    allUserEmails: [],\n    userID: \"\",\n    currentChatID: null,\n    allCurrentUserEmails: [],\n    allCurrentUserIDs: [],\n    email: \"\",\n    newMessageOtherUserEmail: \"\",\n  }\n  \n  username = (e) => {\n    this.setState({\n      username: e.target.value\n    })\n  }\n  \n  getCurrentID = (id) => {\n    this.setState({\n      currentChatID: id\n    })\n  }\n  \n  stayLoggedIn = () => {\n    auth.onAuthStateChanged((user)=> {\n      if(user){\n        this.setState({\n          user,\n          username: user.displayName,\n          userID: user.uid,\n          email: user.email,\n        })\n        this.getUserInfo()\n      }\n    })\n  }\n\n  getUserInfo = () => {\n    const itemRef = firebase.database().ref(\"users\")\n    itemRef.on('value', (snapshot) => {\n      let users = snapshot.val()\n      let usersArray = []\n      for (let userId in users){\n        usersArray.push(users[userId].email)\n      }\n      this.setState({\n        // allUserEmails: [...this.state.allUserEmails, users[userId].email]\n        allUserEmails: usersArray\n      })\n    })\n  }\n\n  getUserEmailsAndMessageIDsFromInbox = (emails, IDs) => {\n    this.setState({\n      allCurrentUserEmails: emails,\n      allCurrentUserIDs: IDs\n    })\n  }\n  \n  componentDidMount() {\n    this.stayLoggedIn()\n    // this.getUserInfo()\n    // this.addUserData(\"Fiona\", \"fiona@orange.com\", \"https://lh3.googleusercontent.com/a-/AOh14GiEWMCD6XAm34qOIe9A3LcvcHcPToUSdOroPHcb\")\n  }\n\n  addUserData = (name, email, uid, photoURL) => {\n    const userData = {\n      name: name,\n      email: email,\n      dateCreated: Date.now(),\n      photoURL: photoURL,\n    }\n    firebase.database().ref(`users/${uid}`).set(userData)\n  }\n  \n  // handleChange = (e) => {\n  //   this.setState({\n  //     message: e.target.value\n  //   })\n  // }\n  \n  removeItem = (itemId) => {\n    const itemRef = firebase.database().ref(`/messages/${this.state.currentChatID}/${itemId}`)\n    itemRef.remove()\n  }\n  \n  logout = () => {\n    auth.signOut()\n    .then(()=> {\n      this.setState({\n        user: null,\n        messages: [],\n        // message: \"\",\n        username: \"\",\n        allUserEmails: [],\n        userID: \"\",\n        allCurrentUserEmails: [],\n        allCurrentUserIDs: [],\n        email: \"\",\n        currentChatID: null,\n      })\n    })\n  }\n\n  getMessages = (id) => {\n    const itemRef = firebase.database().ref(`messages/${id}`)\n    itemRef.on('value', (snapshot) => {\n      let items = snapshot.val()\n      let newState = []\n      for (let item in items) {\n        newState.push({\n          itemId: item,\n          user: items[item].user,\n          message: items[item].message,\n          email: items[item].email,\n        })\n        document.getElementById('scroll-here').scrollIntoView()\n      }\n      if(this.state.currentChatID===snapshot.ref_.path.pieces_[1]||this.state.currentChatID===id){\n        this.setState({\n          messages: newState\n        })\n      }\n    })\n  }\n\n  login = () => {\n    auth.signInWithPopup(provider)\n    .then((result) => {\n      const user = result.user\n      this.setState({\n        user,\n        username: user.displayName\n      })\n      const userRef = firebase.database().ref(\"users\")\n      userRef.once('value', (snapshot)=>{\n        let users = snapshot.val()\n        let counter = 0\n        for (const userData in users){\n          if (users[userData].email===user.email){\n            counter++\n          }\n        }\n        if(counter===0){\n          this.addUserData(user.displayName, user.email, user.uid, user.photoURL)\n        }\n      })\n      this.getUserInfo()\n    })\n  }\n\n  newMessageRoute = (input) => {\n    const route = async () => {\n      await this.getCurrentID(input)\n      await this.getMessages(input)\n    }\n    route()\n  }\n\n  getNewMessageEmail = (email) => {\n    this.setState({\n      newMessageOtherUserEmail: email\n    })\n  }\n\n  clearMessages = () => {\n    this.setState({\n      messages: []\n    })\n  }\n\n  render(){\n    return (\n      <AppContainer>\n        {this.state.user ?\n          <LogOutButton className=\"br1\" onClick={this.logout}>\n            Log Out | {this.state.username}\n          </LogOutButton>             \n          :\n          <div>\n            <AppTitle>Messaging App</AppTitle>\n            <LogInButton onClick={this.login}>LOG IN</LogInButton>              \n          </div>\n        }\n        {this.state.user ? \n        <div>\n          <NewMessage \n          clearMessages={this.clearMessages}\n          getNewMessageEmail={this.getNewMessageEmail}\n          email={this.state.email}\n          getMessages={this.getMessages}\n          allCurrentUserEmails={this.state.allCurrentUserEmails}\n          allCurrentUserIDs={this.state.allCurrentUserIDs}\n          getCurrentID={this.getCurrentID}\n          allUserEmails={this.state.allUserEmails}\n          newMessageRoute={this.newMessageRoute}\n          />\n          <InboxMessageContainer>\n            <InboxContainer \n            getCurrentID={this.getCurrentID}\n            email={this.state.email}\n            currentChatID={this.state.currentChatID}\n            getUserEmailsAndMessageIDsFromInbox={this.getUserEmailsAndMessageIDsFromInbox}\n            newMessageRoute={this.newMessageRoute}\n            />\n            <MessageContainer \n            getCurrentID={this.getCurrentID}\n            newMessageRoute={this.newMessageRoute}\n            allUserEmails={this.state.allUserEmails}\n            newMessageOtherUserEmail={this.state.newMessageOtherUserEmail}\n            email={this.state.email}\n            message={this.state.message}\n            currentChatID={this.state.currentChatID}\n            getMessages={this.getMessages}\n            usernameFunc={this.username}\n            usernameState={this.state.username}\n            handleChange={this.handleChange}\n            messages={this.state.messages}\n            removeItem={this.removeItem}\n            />\n          </InboxMessageContainer>\n        </div>\n        :\n        null\n        }\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\"\n\nexport const IndexContainer = styled.div`\n    // background-color: rgb(28,28,28);\n    background-color: rgb(18,18,23)\n    color: white;\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { IndexContainer } from \"./Index.styles\"\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <IndexContainer>\n      <App />\n    </IndexContainer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}