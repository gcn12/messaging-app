{"version":3,"sources":["Styles/InboxChatButton.styles.js","Components/InboxChatButtons.js","firebase.js","Styles/MessageInput.styles.js","Redux/actions/appActions.js","Components/MessageInput.js","Styles/Messages.styles.js","Components/Messages.js","Components/Scroll.js","Styles/MessageContainer.styles.js","Redux/actions/inboxActions.js","Redux/actions/requestsActions.js","Styles/RequestButtons.styles.js","Components/RequestButtons.js","Components/MessageContainer.js","UnreadCircle.svg","Styles/Inbox.styles.js","Components/Inbox.js","Components/Requests.js","Styles/InboxContainer.styles.js","Components/InboxContainer.js","Styles/NewMessage.styles.js","Components/NewMessage.js","Styles/App.styles.js","Components/App.js","serviceWorker.js","Styles/Index.styles.js","Redux/reducers/appReducer.js","Redux/reducers/inboxReducer.js","Redux/actions/inboxContainerActions.js","Redux/reducers/inboxContainerReducer.js","Redux/reducers/requestsReducer.js","Redux/reducers/rootReducer.js","index.js"],"names":["Button","styled","div","ButtonContainer","InboxChatButtons","props","onClick","isChat","provider","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","GoogleAuthProvider","MessageInputContainer","MessageInputArea","textarea","MessageInputButton","button","isMessagesLoading","isLoadingBoolean","dispatch","type","payload","loadMessagesText","text","preventScrollDown","boolean","addQuantityLoadMessages","quantity","addMessages","messages","addAllCurrentUserIDs","allCurrentUserIDs","addAllCurrentUserEmails","allCurrentUserEmails","addAllUserEmails","allUserEmails","addNewMessageOtherUserEmail","otherUserEmail","addEmail","email","addCurrentChatID","currentChatID","addUser","user","addUserID","userID","MessageInput","state","message","submitFunction","messageRef","messageID","otherUserID","otherUserDisplayName","otherUserPhotoURL","database","ref","once","snapshot","userIndex","allUserEmailsRedux","indexOf","newMessageOtherUserEmailRedux","userInfoArray","Object","keys","val","name","photoURL","addMessageID","addMessageIDToOtherUser","messagesRedux","length","itemRef","messageInfo","lastMessage","Date","now","user1Photo","user2Photo","userRedux","user1Email","user2Email","user1","user2","displayName","request","requestStatus","push","then","collectionRef","path","pieces_","pop","update","usernameState","read","emailRedux","sent","document","getElementById","value","test","currentChatIDRedux","messageRefValues","values","userMessageIDs","id","lastUpdated","setState","submitFunctionAsync","a","getMessages","runFunction","submit","e","keyCode","shiftKey","preventDefault","handleMessageChange","target","clearUnread","messageKeys","messageValues","reverse","splice","valueIndex","readTime","className","onChange","this","placeholder","addEventListener","Component","connect","app","MessageOptionsContainer","isCurrentUser","UserMessageStyle","NewMessageHeader","MessagesContainer","Delete","Options","showOptions","Seen","ShowHideMessages","show","hide","onMouseLeave","userMessage","itemID","index","messagesQuantity","moment","unix","calendar","toLowerCase","removeItem","Number","Messages","itemId","remove","map","key","isMesssagesLoading","Scroll","style","overflow","border","height","display","flexDirection","children","MessageContainerStyles","LoadContainer","LoadMore","isInboxTab","inboxTabBool","addAllInfoInbox","info","addRequestCount","requestCount","isMessageRequest","isRequestBool","RequestButtonsContainer","DeleteButton","AcceptButton","accept","input","MessageContainer","loadMoreMessages","newMessageRoute","usernameFunc","username","requests","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","cx","cy","r","fill","_ref","svgRef","title","width","ForwardRef","forwardRef","InboxContainer","isCurrentThread","ImageContainer","ProfileImage","img","InboxUser","InboxMessage","UndreadContainer","UnreadStyles","UnreadCircle","compareLastMessageTimestamp","b","comparison","Inbox","allInfo","getMessageSummaries","currentUser","uid","on","messagesSnapshot","sort","messagesArray","requestArray","allUserIDs","finalInfoObject","loopIndex","messageSummary","infoObject","unreadMessages","unreadCount","unreadMessage","otherUserInfo","split","slice","scrollIntoView","console","log","inboxToMessages","inboxToMessagesAsync","getMessageSummariesAsync","allInfoInbox","alt","src","unread","inbox","InboxContainerStyle","TabsContainer","InboxTab","isSelected","RequestsTab","Requests","NewMessageButton","NewMessageInput","NewMessageContainer","NewMessage","isUserExist","handleEmail","createNewMessage","emailIndex","allCurrentUserEmailsRedux","allCurrentUserIDsRedux","MobileContainer","ChatButtonsMobile","AppContainer","LogOutButton","LogInButton","InboxMessageContainer","AppTitle","HomepageContainer","InboxMobile","App","showLogInButton","stayLoggedIn","onAuthStateChanged","getUserInfo","users","usersArray","userId","addUserData","userData","dateCreated","set","logout","signOut","orderByKey","limitToLast","quantityLoadMessages","items","newState","item","ref_","login","signInWithPopup","result","counter","route","bool","Boolean","window","location","hostname","match","IndexContainer","initialState","userIDRedux","messagesInboxRedux","allInfoRedux","rootReducer","combineReducers","action","inboxContainer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a916a649.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Button = styled.div`\n    color: white;\n    padding-right: 20px;\n    &:hover{\n        cursor: pointer\n    }\n`\n\nexport const ButtonContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    &:hover{\n        cursor: pointer\n    }\n`","import React from 'react' \nimport { Button, ButtonContainer } from '../Styles/InboxChatButton.styles'\n\nconst InboxChatButtons = (props) => {\n    return(\n        <ButtonContainer>\n            <Button onClick={()=>props.isChat(true, false)}>\n                Inbox\n            </Button>\n            <Button onClick={()=>props.isChat(false, true)}>\n                Chat\n            </Button>\n        </ButtonContainer>\n    )\n}\n\nexport default InboxChatButtons","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport 'firebase/database'\n\nconst config = {\n    apiKey: \"AIzaSyDVflBKJPhm5bNZfYL5yoqT66NfyiPQgT0\",\n    authDomain: \"messages-598f6.firebaseapp.com\",\n    databaseURL: \"https://messages-598f6.firebaseio.com\",\n    projectId: \"messages-598f6\",\n    storageBucket: \"messages-598f6.appspot.com\",\n    messagingSenderId: \"1044285096751\",\n    appId: \"1:1044285096751:web:f00b017ec43ce7dd2557da\",\n    measurementId: \"G-KRSD66CD2T\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(config)\nconst db = firebaseApp.firestore()\n\nexport { db }\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\n\nexport default firebase","import styled from 'styled-components'\n\nexport const MessageInputContainer = styled.div`\n    margin-top: 10px;\n    display: flex;\n    width: 100%;\n`\n \nexport const MessageInputArea = styled.textarea`\n    height: 5vh;\n    width: 93%;\n    background-color: grey;\n    border: none;\n    color: white;\n`\n \nexport const MessageInputButton = styled.button`\n    &:hover {\n        cursor: pointer\n    }\n`","export const ADD_USER = \"ADD_USER\"\nexport const ADD_USERID = \"ADD_USERID\"\nexport const ADD_CURRENT_CHAT_ID = \"ADD_CURRENT_CHAT_ID\"\nexport const ADD_EMAIL = \"ADD_EMAIL\"\nexport const ADD_NEW_MESSAGE_OTHER_USER_EMAIL = 'ADD_NEW_MESSAGE_OTHER_USER_EMAIL'\nexport const ADD_ALL_USER_EMAILS = 'ADD_ALL_USER_EMAILS'\nexport const ADD_ALL_CURRENT_USER_EMAILS = 'ADD_ALL_CURRENT_USER_EMAILS'\nexport const ADD_ALL_CURRENT_USER_IDS = 'ADD_ALL_CURRENT_USER_IDS'\nexport const ADD_MESSAGES = 'ADD_MESSAGES'\nexport const ADD_QUANTITY_LOAD_MESSAGES = 'ADD_QUANTITY_LOAD_MESSAGES'\nexport const PREVENT_SCROLL_DOWN = 'PREVENT_SCROLL_DOWN'\nexport const LOAD_MESSAGES_TEXT = 'LOAD_MESSAGES_TEXT'\nexport const IS_MESSAGES_LOADING = 'IS_MESSAGES_LOADING'\n\nexport const isMessagesLoading = (isLoadingBoolean) => {\n    return(dispatch) => {\n        dispatch({type: IS_MESSAGES_LOADING, payload: isLoadingBoolean})\n    }\n}\n\nexport const loadMessagesText = (text) => {\n    return(dispatch)=> {\n        dispatch({type: LOAD_MESSAGES_TEXT, payload: text})\n    }\n}\n\nexport const preventScrollDown = (boolean) => {\n    return(dispatch)=> {\n        dispatch({type:PREVENT_SCROLL_DOWN, payload: boolean})\n    } \n}\n\nexport const addQuantityLoadMessages = (quantity) => {\n    return(dispatch) => {\n        dispatch({type: ADD_QUANTITY_LOAD_MESSAGES, payload: quantity})\n    }\n}\n\nexport const addMessages = (messages) => {\n    return (dispatch) => {\n        dispatch({type: ADD_MESSAGES, payload: messages})\n    }\n}\n\nexport const addAllCurrentUserIDs = (allCurrentUserIDs) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_CURRENT_USER_IDS, payload: allCurrentUserIDs})\n    }\n}\n\nexport const addAllCurrentUserEmails = (allCurrentUserEmails) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_CURRENT_USER_EMAILS, payload: allCurrentUserEmails})\n    }\n}\n\nexport const addAllUserEmails = (allUserEmails) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_USER_EMAILS, payload: allUserEmails})\n    }\n}\n\nexport const addNewMessageOtherUserEmail = (otherUserEmail) => {\n    return(dispatch) => {\n        dispatch({type: ADD_NEW_MESSAGE_OTHER_USER_EMAIL, payload: otherUserEmail})\n    }\n}\n\nexport const addEmail = (email) => {\n    return(dispatch) => {\n        dispatch({type: ADD_EMAIL, payload: email})\n    }\n}\n\nexport const addCurrentChatID = (currentChatID) => {\n    return(dispatch) => {\n        dispatch({type: ADD_CURRENT_CHAT_ID, payload: currentChatID})\n    }\n}\n\nexport const addUser = (user) => {\n    return(dispatch) => {\n        dispatch({ type: ADD_USER, payload: user })\n    }\n}\n\nexport const addUserID = (userID) => {\n    return(dispatch)=>{\n        dispatch({type: ADD_USERID, payload: userID})\n    }\n}","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport { MessageInputContainer, \n    MessageInputArea, \n    MessageInputButton, \n} from '../Styles/MessageInput.styles'\nimport { connect } from 'react-redux'\nimport { addCurrentChatID, addQuantityLoadMessages } from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n    allUserEmailsRedux: state.app.allUserEmailsRedux,\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    newMessageOtherUserEmailRedux: state.app.newMessageOtherUserEmailRedux,\n    userID: state.app.userID,\n    userRedux: state.app.userRedux,\n})\n \nclass MessageInput extends Component {\n\n    state = {\n        message: ''\n    }\n\n\n\n    submitFunction = () => {\n        let messageRef\n        let messageID\n        let otherUserID\n        let otherUserDisplayName\n        let otherUserPhotoURL\n        let otherUserEmail\n        const userIdRef = firebase.database().ref('users')\n        userIdRef.once('value', (snapshot)=> {\n            const userIndex = this.props.allUserEmailsRedux.indexOf(this.props.newMessageOtherUserEmailRedux)\n            const userInfoArray = Object.keys(snapshot.val())\n            otherUserID = userInfoArray[userIndex]\n            if(userIndex!==-1){\n                otherUserDisplayName = snapshot.val()[otherUserID].name\n                otherUserPhotoURL = snapshot.val()[otherUserID].photoURL\n                otherUserEmail = snapshot.val()[otherUserID].email\n            }\n        })\n        const addMessageID = firebase.database().ref(`users/${this.props.userID}/messages`)\n        let addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n        if(this.props.messagesRedux.length===0){\n            // this.props.newMessageRoute()\n            const itemRef = firebase.database().ref(\"messages\")\n            const messageInfo = {\n                lastMessage: Date.now(),\n                user1Photo: otherUserPhotoURL,\n                user2Photo: this.props.userRedux.photoURL,\n                user1Email: otherUserEmail,\n                user2Email: this.props.userRedux.email,\n                user1: otherUserDisplayName,\n                user2: this.props.userRedux.displayName,\n                request: otherUserEmail,\n                requestStatus: 'pending',\n            }\n            itemRef.push(messageInfo)\n            .then((collectionRef)=>{\n                messageID = collectionRef.path.pieces_.pop()\n                this.props.dispatch(addCurrentChatID(messageID))\n                addMessageID.push({\n                    messageID: messageID,\n                    lastMessage: Date.now(),\n                })\n\n                addMessageIDToOtherUser.push({\n                    messageID: messageID,\n                    lastMessage: Date.now(),\n                })\n\n                messageRef = firebase.database().ref(`messages/${messageID}`)\n                messageRef.update({\n                    lastMessage: Date.now()\n                })\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.emailRedux,\n                    sent: Date.now(),\n                }\n                messageRef.push(message)\n                document.getElementById(\"message-input\").value=\"\"\n            })\n        }else{\n            const noEmptyMessage = /^(?!\\s*$).+/\n            if(noEmptyMessage.test(this.state.message)){\n                messageRef = firebase.database().ref(`messages/${this.props.currentChatIDRedux}`)\n                messageRef.once('value', (snapshot)=> {\n                    let messageRefValues = snapshot.val()\n                    messageRefValues = Object.values(messageRefValues)\n                    if(this.props.emailRedux!==messageRefValues[messageRefValues.length-2]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-2]\n                    }else if (this.props.emailRedux!==messageRefValues[messageRefValues.length-5]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-5]\n                    }\n                })\n                this.props.dispatch(addQuantityLoadMessages(1))\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.emailRedux,\n                    sent: Date.now(),\n                }\n                messageRef.push(message)\n                messageRef.update({\n                    lastMessage: Date.now()\n                })\n                const messageRefTest = firebase.database().ref('users')\n                messageRefTest.once('value', (snapshot)=> {\n                    for (let userID in snapshot.val()){\n                        if(snapshot.val()[userID].email===otherUserEmail){\n                            otherUserID = userID\n                        }\n                    }\n                })\n                addMessageID.once('value', (snapshot)=> {\n                    const userMessageIDs = snapshot.val()\n                    for (let id in userMessageIDs){\n                        if (userMessageIDs[id].messageID  === this.props.currentChatIDRedux){\n                            const idTimestampRef = firebase.database().ref(`users/${this.props.userID}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n                addMessageIDToOtherUser.once('value', (snapshot)=> {\n                    for (let id in snapshot.val()){\n                        if (snapshot.val()[id].messageID  === this.props.currentChatIDRedux){\n                            const idTimestampRef = firebase.database().ref(`users/${otherUserID}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                const lastUpdatedRef = firebase.database().ref(`users/${this.props.userID}`)\n                lastUpdatedRef.update({\n                    lastUpdated: Date.now()\n                })\n                this.setState({\n                    message: ''\n                })\n                document.getElementById(\"message-input\").value=\"\"\n            }\n        }\n    }\n\n    submitFunctionAsync = () => {\n        const runFunction = async () => {\n            await this.submitFunction()\n            await this.props.getMessages(this.props.currentChatIDRedux)\n        }\n        runFunction()\n    }\n\n    submit = (e) => {\n        if (e.keyCode){\n            if (e.keyCode===13 && !e.shiftKey){\n                e.preventDefault()\n                this.submitFunctionAsync()\n            }\n        }else{\n            this.submitFunctionAsync()\n        }\n    }\n\n    handleMessageChange = (e) => {\n        this.setState({\n          message: e.target.value\n        })\n    }\n\n    clearUnread = (messageID) => {\n        if(this.props.messagesRedux.length>0){\n            const messageRef = firebase.database().ref(`messages/${messageID}`)\n            messageRef.once('value', (snapshot) => {\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,9)\n                messageValues.reverse().splice(0,9)\n                let valueIndex = 0\n                for (let value of messageValues) {\n                    if(value.read===false){\n                        if(value.email !== this.props.emailRedux){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[valueIndex]}`)\n                            firebaseMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                            valueIndex++\n                        }\n                    }else{\n                        break\n                    }\n                }\n            })\n        }\n    }\n\n    render(){\n        return(\n            <MessageInputContainer>\n                <MessageInputArea className=\"br3\" onClick={()=>this.clearUnread(this.props.currentChatIDRedux)} id=\"message-input\" onChange={this.handleMessageChange} placeholder=\"enter message\"></MessageInputArea>\n                <MessageInputButton onClick={this.submit}>Send</MessageInputButton>\n            </MessageInputContainer>\n        ) \n    }\n    componentDidMount(){\n        document.addEventListener(\"keypress\", this.submit)\n    }\n}\n\nexport default connect(mapStateToProps)(MessageInput)\n\n","import styled from \"styled-components\"\n\nexport const MessageOptionsContainer = styled.div`\n    display: flex;\n    flex-direction: ${props => (props.isCurrentUser ? \"row-reverse\" : \"row\")};\n    align-items: center;\n`\n\nexport const UserMessageStyle = styled.div`\n    color: white;\n    background-color: ${props => (props.isCurrentUser ? \"rgb(45, 45, 45)\" : \"rgb(80, 80, 80)\")};\n    border: rgb(20,20,20) solid 1px;\n    max-width: 45%;\n    min-width: 15%;\n    word-wrap:break-word;\n    &:hover {\n        cursor: pointer\n    }\n`\n\nexport const NewMessageHeader = styled.div`\n    color: white;\n`\n\nexport const MessagesContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n\nexport const Delete = styled.button`\n    color: white;\n    border: none;\n    background-color: rgb(45, 45, 45);\n    &:hover {\n        cursor:pointer\n    }\n`\n\nexport const Options = styled.div`\n    margin-top: 1rem;\n    background: rgb(70,70,70);\n    visibility: ${props=> (props.showOptions ?  'null': 'hidden')};\n`\n\nexport const Seen = styled.div`\n    font-size: 10px;\n`","import React, { Component } from \"react\"\nimport { UserMessageStyle,\n     NewMessageHeader, \n     MessagesContainer, \n     Options, \n     MessageOptionsContainer,\n     Delete,\n     Seen,\n} from  \"../Styles/Messages.styles\"\nimport { connect } from 'react-redux'\n// import { addQuantityLoadMessages } from '../Redux/actions/appActions'\nimport firebase from '../firebase'\nimport moment from 'moment'\n\nconst mapStateToProps = (state) => ({\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    newMessageOtherUserEmailRedux: state.app.newMessageOtherUserEmailRedux,\n    isMesssagesLoading: state.app.isMesssagesLoading,\n})\n\nclass ShowHideMessages extends Component {\n    state = {\n        showOptions: false,\n    }\n\n    show = () => {\n        this.setState({\n            showOptions: true\n        })\n    }\n\n    hide = () => {\n        this.setState({\n            showOptions: false\n        })\n    }\n\n    render() {\n        return(\n            this.props.message ? \n            <MessageOptionsContainer onMouseLeave={this.hide} isCurrentUser={this.props.emailRedux===this.props.email ? true : false}>\n                <UserMessageStyle isCurrentUser={this.props.emailRedux===this.props.email ? true : false} onClick={this.show} className={this.props.user===this.props.userMessage ? \"current-user grow br3 pa3 ma1 dib bw2 shadow-5\" : \"other-user grow br3 pa3 ma2 dib bw2 shadow-5\"}>\n                    {this.props.itemID!==\"lastMessage\"&&this.props.itemID!==\"user1\"&&this.props.itemID!==\"user2\"&&this.props.itemID!==\"user2Photo\"&&this.props.itemID!==\"user1Photo\"&&this.props.itemID!==\"user2Email\"&&this.props.itemID!==\"user1Email\" ? \n                    <div>\n                        {this.props.message}\n                        {(this.props.index===this.props.messagesQuantity-10)&&(this.props.readTime>0)&&(this.props.email===this.props.emailRedux) ? \n                        <Seen>Seen {moment.unix(this.props.readTime/1000).calendar().toLowerCase()}</Seen>\n                        :\n                        null\n                        }\n                    </div>\n                    : \n                    null\n                    }\n                </UserMessageStyle>\n                <Options isCurrentUser={this.props.emailRedux===this.props.email ? true : false} className='br3 pa2 ma1 dib shadow-5' showOptions={this.state.showOptions}>\n                    {this.props.emailRedux===this.props.email ? \n                    <Delete onClick={()=>this.props.removeItem(this.props.itemID)}>Delete</Delete>\n                    :\n                    null\n                    }\n                    <div>{moment.unix(Number(this.props.sent)/1000).calendar()}</div>\n                </Options>\n            </MessageOptionsContainer>\n            : \n            null\n        )\n    }\n}\n\nclass Messages extends Component {\n\n\n    removeItem = (itemId) => {\n        const itemRef = firebase.database().ref(`/messages/${this.props.currentChatIDRedux}/${itemId}`)\n        itemRef.remove()\n    }\n\n    render() {\n        return(\n            <MessagesContainer>\n                {/* <button onClick={()=>console.log(props.messagesRedux)}>push</button> */}\n                {this.props.currentChatIDRedux===\"NEW MESSAGE\" ? \n                    <NewMessageHeader>\n                        Send new message to: {this.props.newMessageOtherUserEmailRedux}\n                    </NewMessageHeader>\n                    :\n                    null\n                }\n                \n                {this.props.messagesRedux.map((message, index)=> {\n                    return(\n                        <ShowHideMessages\n                        messagesQuantity={this.props.messagesRedux.length}\n                        index={index}\n                        readTime={message.readTime}\n                        emailRedux={this.props.emailRedux}\n                        removeItem={this.removeItem}\n                        key={index}\n                        message={message.message}\n                        email={message.email}\n                        userMessage={message.user}\n                        itemID={message.itemId}\n                        sent={message.sent}\n                        />\n                    )\n                })\n                }\n            </MessagesContainer>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Messages)","import React from \"react\"\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflow: \"scroll\", border: \"5px black\", height: props.height, display:props.display, flexDirection:props.flexDirection}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import styled from \"styled-components\"\n\nexport const MessageContainerStyles = styled.div`\n    @media (max-width: 900px){\n        height: 81vh;\n        width: 100vw;\n    }\n    @media (min-width: 900px){\n        height: 81vh;\n        width: 55vw;\n    }\n    @media (min-width: 1100px){\n        height: 81vh;\n        width: 700px;\n    }\n    border: 5px solid rgb(30,30,30);\n`\n\nexport const LoadContainer = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nexport const LoadMore = styled.button`\n    color: white;\n    background-color: rgb(40,40,40);\n    border: none;\n    &:hover {\n        cursor: pointer\n    }\n`","export const IS_INBOX_TAB = \"IS_INBOX_TAB\"\nexport const ADD_ALL_INFO_INBOX = 'ADD_ALL_INFO_INBOX'\n\nexport const isInboxTab = (inboxTabBool) => {\n    return(dispatch) => {\n        dispatch({type: IS_INBOX_TAB, payload: inboxTabBool})\n    }\n}\n\nexport const addAllInfoInbox = (info) => {\n    return(dispatch) => {\n        dispatch({type:ADD_ALL_INFO_INBOX, payload: info})\n    }\n}","export const ADD_REQUEST_COUNT = 'ADD_REQUEST_COUNT'\nexport const IS_MESSAGE_REQUEST = 'IS_MESSAGE_REQUEST'\n\nexport const addRequestCount = (requestCount) => {\n    return(dispatch) => {\n        dispatch({type: ADD_REQUEST_COUNT, payload: requestCount})\n    }\n}\n\nexport const isMessageRequest = (isRequestBool) => {\n    return(dispatch) => {\n        dispatch({type: IS_MESSAGE_REQUEST, payload: isRequestBool})\n    }\n}","import styled from 'styled-components'\n\nexport const RequestButtonsContainer = styled.div`\n    display: flex;\n    width: 50vw;\n`\n\nexport const DeleteButton = styled.button`\n    background-color: rgb(40,40,40);\n    color: white;\n    border: none;\n    justify-content: center;\n    &:hover{\n        cursor:pointer\n    }\n`\n\nexport const AcceptButton = styled.button`\n    background-color: rgb(40,40,40);\n    color: white;\n    border: none;\n    justify-content: center;\n    &:hover{\n        cursor:pointer\n    }\n`","import React from 'react'\nimport firebase from '../firebase'\nimport { connect } from 'react-redux'\nimport { isInboxTab } from '../Redux/actions/inboxActions'\nimport { isMessageRequest } from '../Redux/actions/requestsActions'\nimport { addMessages, addCurrentChatID } from '../Redux/actions/appActions'\nimport { RequestButtonsContainer,\n    DeleteButton,\n    AcceptButton,\n} from '../Styles/RequestButtons.styles'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    userID: state.app.userID,\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n})\n\n\nconst RequestButtons = (props) => {\n    const clearUnread = (messageID) => {\n        if(props.messagesRedux.length>0){\n            const messageRef = firebase.database().ref(`messages/${messageID}`)\n            messageRef.once('value', (snapshot) => {\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,9)\n                messageValues.reverse().splice(0,9)\n                let valueIndex = 0\n                for (let value of messageValues) {\n                    if(value.read===false){\n                        if(value.email !== props.emailRedux){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[valueIndex]}`)\n                            firebaseMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                            valueIndex++\n                        }\n                    }else{\n                        break\n                    }\n                }\n            })\n        }\n    }\n    const accept = (input) => {\n        const acceptRef = firebase.database().ref(`messages/${props.currentChatIDRedux}`)\n        acceptRef.update({\n            requestStatus: input\n        })\n        const lastUpdatedRef = firebase.database().ref(`users/${props.userID}`)\n        lastUpdatedRef.update({\n            lastUpdated: Date.now()\n        })\n        if (input===\"accepted\"){\n            props.dispatch(isInboxTab(true))\n            props.dispatch(isMessageRequest(false))\n            clearUnread(props.currentChatIDRedux)\n        }else{\n            props.dispatch(addMessages([]))\n            props.dispatch(addCurrentChatID(null))\n        }\n    }\n    return(\n        <RequestButtonsContainer>\n            <DeleteButton onClick={()=>accept('rejected')} className='br2'>Delete</DeleteButton>\n            <AcceptButton onClick={()=>accept('accepted')} className='br2'>Accept</AcceptButton>\n        </RequestButtonsContainer>\n    )\n}\n\nexport default connect(mapStateToProps)(RequestButtons)","import React, { Component } from \"react\"\nimport MessageInput from \"./MessageInput\"\nimport Messages from \"./Messages\"\nimport Scroll from \"./Scroll\" \nimport { \n    MessageContainerStyles, \n    LoadMore, \n    LoadContainer\n} from \"../Styles/MessageContainer.styles\"\nimport { connect } from 'react-redux'\nimport RequestButtons from \"./RequestButtons\"\n\nimport { \n    addQuantityLoadMessages,\n    preventScrollDown,\n} from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    messagesRedux: state.app.messagesRedux,\n    isMessageRequest: state.requests.isMessageRequest,\n    loadMessagesText: state.app.loadMessagesText\n})\n\nclass MessageContainer extends Component {\n\n    loadMoreMessages = () => {\n        const runFunction = async () => {\n            await this.props.dispatch(preventScrollDown(true))\n            await this.props.dispatch(addQuantityLoadMessages(15))\n            await this.props.getMessages(this.props.currentChatIDRedux)\n        }\n        runFunction()\n    }\n\n    render() {\n        return(\n            <div>\n                <MessageContainerStyles className=\"message-container\">\n                    <Scroll height=\"79vh\">\n                    {this.props.messagesRedux.length > 23 ? \n                    <LoadContainer>\n                        <LoadMore onClick={this.loadMoreMessages}>{this.props.loadMessagesText}</LoadMore>\n                    </LoadContainer>\n                    :\n                    null\n                    }\n                        <Messages \n                        removeItem={this.props.removeItem} \n                        user={this.props.usernameState}\n                        />\n                        <div id=\"scroll-here\"></div>\n                    </Scroll>\n                </MessageContainerStyles>\n                    {this.props.currentChatIDRedux!==null ? \n                    (this.props.isMessageRequest ? \n                        <RequestButtons />\n                        :\n                        <MessageInput \n                        newMessageRoute={this.props.newMessageRoute}\n                        usernameState={this.props.usernameState}\n                        getMessages={this.props.getMessages} \n                        usernameFunc={this.props.username} \n                        />\n                        )\n                    :\n                    null\n                    }  \n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(MessageContainer)","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 20,\n  cy: 20,\n  r: 16,\n  fill: \"rgb(26, 26, 26)\"\n});\n\nvar SvgUnreadCircle = function SvgUnreadCircle(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 40,\n    width: 40,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgUnreadCircle, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/UnreadCircle.8c406109.svg\";\nexport { ForwardRef as ReactComponent };","import styled from \"styled-components\"\nimport { ReactComponent as UnreadCircle } from '../UnreadCircle.svg'\n\nexport const InboxContainer = styled.div`\n    height: 90px;\n    cursor: pointer;\n    border: solid rgb(5,5,5) 1px;\n    background-color: ${props=>(props.isCurrentThread ? \"rgb(100,100,100) \" : \"rgb(40,40,40)\")} ;\n    color: white;\n    display: flex;\n    width: 97%;\n`\n\nexport const ImageContainer = styled.div`\n    width: 25%;\n    float: left;\n    align-items: center;\n`\n\nexport const ProfileImage = styled.img`\n    padding-left: 10px;\n    height: 60px;\n    width: 60px;\n`\n\nexport const MessageContainer = styled.div`\n    float: left;\n    width: 50%;\n    height: 50%;\n`\n\nexport const InboxUser = styled.div`\n    font-size: 20px;\n`\n\nexport const InboxMessage = styled.div`\n    word-wrap:break-word;\n`\n\n\nexport const UndreadContainer = styled.div`\n    float: right;\n    width: 25%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nexport const UnreadCircleIcon = styled(UnreadCircle)`\n\n`\n\nexport const UnreadStyles = styled.div`\n    position: absolute;\n`\n\n","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport { \n    InboxMessage, \n    ProfileImage, \n    InboxContainer, \n    UnreadStyles,\n    UndreadContainer, \n    ImageContainer,\n    MessageContainer,\n    InboxUser,\n} from \"../Styles/Inbox.styles\"\nimport { ReactComponent as UnreadCircle } from \"../UnreadCircle.svg\"\nimport { connect } from 'react-redux'\nimport { addAllCurrentUserEmails, addAllCurrentUserIDs } from '../Redux/actions/appActions'\nimport { addRequestCount, isMessageRequest } from \"../Redux/actions/requestsActions\"\nimport { addAllInfoInbox } from '../Redux/actions/inboxActions'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    emailRedux: state.app.emailRedux,\n    isInboxTab: state.inbox.isInboxTab,\n    requestCount: state.requests.requestCount,\n    allInfoInbox: state.inbox.allInfoInbox,\n    messagesRedux: state.app.messagesRedux,\n    userRedux: state.app.userRedux,\n})\n\nconst compareLastMessageTimestamp = (a, b) => {\n    let comparison = 0\n    if (a.lastMessage < b.lastMessage){\n        comparison = 1\n    } else if (a.lastMessage > b.lastMessage){\n        comparison = -1\n    } \n    return comparison\n}\n\nclass Inbox extends Component {\n\n    state = {\n        messages: [],\n        allInfo: [],\n    }\n\n    getMessageSummaries = () => {\n        const userID = firebase.auth().currentUser\n        const messagesRef = firebase.database().ref(`users/${userID.uid}`)\n        messagesRef.on('value', (snapshot)=> {\n            const messagesSnapshot = snapshot.val()\n            if(messagesSnapshot){\n                if(messagesSnapshot.messages){\n                    let messageInfo = Object.values(messagesSnapshot.messages)\n                    messageInfo = messageInfo.sort(compareLastMessageTimestamp)\n                    let messagesArray = []\n                    let requestArray = []\n                    let allUserIDs = []\n                    let allUserEmails = []\n                    let finalInfoObject = {}\n                    for (let message of messageInfo){\n                        let loopIndex = 0\n                        const messageSummary = firebase.database().ref(`messages/${message.messageID}`)\n                        let lastMessage \n                        messageSummary.on('value', (snapshot)=> {\n                            if(snapshot.val()){\n                                let infoObject = {}\n                                lastMessage = Object.values(snapshot.val())\n                                let unreadMessages = Object.values(snapshot.val())\n                                unreadMessages.reverse().splice(0,9)\n                                let unreadCount = 0\n                                for (let unreadMessage of unreadMessages) {\n                                    if(unreadMessage.read===false){\n                                        if(unreadMessage.email!==userID.email){\n                                            unreadCount++\n                                        }\n                                    }else{\n                                        break\n                                    }\n                                }\n                                const otherUserInfo = Object.values(snapshot.val())\n                                let otherUserDisplayName \n                                let otherUserPhotoURL\n                                if (otherUserInfo[otherUserInfo.length-3]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-6]\n                                } else {\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-3]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-1]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-4]\n                                } else {\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-1]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-2]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-5])\n                                } else {\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-2])\n                                }\n                                lastMessage = lastMessage[lastMessage.length-10]\n                                if(lastMessage){\n                                    lastMessage = Object.values(lastMessage)[1]\n                                    if(lastMessage.length+lastMessage.split(\" \").length > 31){\n                                        lastMessage = lastMessage.slice(0, 31)\n                                        lastMessage += \"...\"\n                                    }\n                                }\n                                allUserIDs.push(message.messageID)\n                                infoObject[\"message\"] = lastMessage\n                                infoObject[\"photoURL\"] = otherUserPhotoURL\n                                infoObject[\"displayName\"] = otherUserDisplayName\n                                infoObject[\"unread\"] = unreadCount\n                                if(snapshot.val().requestStatus==='accepted'||snapshot.val().request!==this.props.emailRedux){\n                                    finalInfoObject[message.messageID] = infoObject\n                                    this.setState({\n                                        allInfo: finalInfoObject\n                                    })\n                                    this.props.dispatch(addAllInfoInbox(finalInfoObject))\n                                    messagesArray.push(message.messageID)\n                                }\n                                if(snapshot.val().request===this.props.emailRedux&&snapshot.val().requestStatus==='pending'){\n                                    requestArray.push(message.messageID)\n                                }else{\n                                    if(loopIndex>-1){\n                                        if(this.props.currentChatIDRedux===null){\n                                            if(snapshot.val().requestStatus!=='rejected'||snapshot.val().request!==this.props.emailRedux){\n                                                this.props.newMessageRoute(message.messageID)\n                                                loopIndex = -1 \n                                            }\n                                        }\n                                    }else{\n                                        loopIndex++\n                                    }\n                                }\n                                this.props.dispatch(addRequestCount(requestArray.length))\n                            }\n                        })\n                        this.props.dispatch(addAllCurrentUserEmails(allUserEmails))\n                        this.props.dispatch(addAllCurrentUserIDs(allUserIDs))\n                    }\n                    if(this.props.messagesRedux.length >=  messagesArray.length+requestArray.length){\n                        if(document.getElementById('scroll-here')){\n                            document.getElementById('scroll-here').scrollIntoView();\n                        }\n                    }\n                    this.setState({\n                        messages: messagesArray,\n                    })\n                }\n            }   \n        })\n    } \n\n\n    test = () => {\n        console.log(Object.values(this.state.allInfo))\n    }\n\n    inboxToMessages = (messageID) => {\n        this.props.newMessageRoute(messageID)\n        const messageRef = firebase.database().ref(`messages/${messageID}`)\n        messageRef.on('value', (snapshot) => {\n            if(snapshot.val()){\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,8)\n                messageValues.reverse().splice(0,8)\n                messageValues.map((value,index) => {\n                    if(value.read===false){\n                        if(value.email!==this.props.emailRedux){\n                            const updateMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[index]}`)\n                            updateMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                        }\n                    }\n                    return null\n                })\n                document.getElementById('scroll-here').scrollIntoView();\n            }\n        })\n    }\n\n    inboxToMessagesAsync = (messageID) => {\n        const runFunction = async () => {\n            await this.props.dispatch(isMessageRequest(false))\n            await this.inboxToMessages(messageID)\n            await document.getElementById('scroll-here').scrollIntoView();\n        }\n        runFunction()\n    } \n\n    getMessageSummariesAsync = () => {\n        const runFunction = async () => {\n            await this.props.dispatch(addRequestCount(0))\n            await this.getMessageSummaries()\n        }\n        runFunction()\n    }\n\n\n    componentDidMount(){\n        this.getMessageSummariesAsync()\n    }\n    \n    render() {\n        return(\n            <div>\n                {Object.values(this.props.allInfoInbox).map((message, index)=> {\n                    // console.log('return', message)\n                    return(\n                        <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatIDRedux===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessagesAsync(this.state.messages[index])} key={index}>\n                            <ImageContainer>\n                                <ProfileImage alt=\"user profile\" src={message.photoURL}></ProfileImage>\n                            </ImageContainer>\n                            <MessageContainer>\n                                <InboxUser>{message.displayName}</InboxUser>\n                                <InboxMessage >{message.message}</InboxMessage>\n                            </MessageContainer>\n                            {message.unread > 0 ? \n                                <UndreadContainer>\n                                    <UnreadCircle></UnreadCircle>\n                                    <UnreadStyles>{message.unread}</UnreadStyles>\n                                </UndreadContainer>\n                            :\n                            null\n                            }\n                        </InboxContainer>\n                    )\n                    })\n                }\n                </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Inbox)","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport { \n    InboxMessage, \n    ProfileImage, \n    InboxContainer,  \n    ImageContainer,\n    MessageContainer,\n    InboxUser,\n} from \"../Styles/Inbox.styles\"\nimport { connect } from 'react-redux'\nimport { addAllCurrentUserEmails, addAllCurrentUserIDs } from '../Redux/actions/appActions'\nimport { isMessageRequest } from \"../Redux/actions/requestsActions\"\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    emailRedux: state.app.emailRedux,\n    isInboxTab: state.inbox.isInboxTab,\n})\n\nconst compareLastMessageTimestamp = (a, b) => {\n    let comparison = 0\n    if (a.lastMessage < b.lastMessage){\n        comparison = 1\n    } else if (a.lastMessage > b.lastMessage){\n        comparison = -1\n    } \n    return comparison\n}\n\nclass Inbox extends Component {\n\n    state = {\n        messages: [],\n        allInfo: [],\n    }\n\n    getMessageSummaries = () => {\n        const userID = firebase.auth().currentUser\n        const messagesRef = firebase.database().ref(`users/${userID.uid}`)\n        messagesRef.on('value', (snapshot)=> {\n            const messagesSnapshot = snapshot.val()\n            if(messagesSnapshot){\n                if(messagesSnapshot.messages){\n                    let messageInfo = Object.values(messagesSnapshot.messages)\n                    messageInfo = messageInfo.sort(compareLastMessageTimestamp)\n                    let messagesArray = []\n                    let allUserIDs = []\n                    let allUserEmails = []\n                    let finalInfoObject = {}\n                    for (let message of messageInfo){\n                        const messageSummary = firebase.database().ref(`messages/${message.messageID}`)\n                        let lastMessage \n                        messageSummary.on('value', (snapshot)=> {\n                            if(snapshot.val()){\n                                let infoObject = {}\n                                lastMessage = Object.values(snapshot.val())\n                                let unreadCount = 0\n                                const otherUserInfo = Object.values(snapshot.val())\n                                let otherUserDisplayName \n                                let otherUserPhotoURL\n                                if (otherUserInfo[otherUserInfo.length-3]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-6]\n                                } else if (otherUserInfo[otherUserInfo.length-6]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-3]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-1]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-4]\n                                } else if(otherUserInfo[otherUserInfo.length-4]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-1]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-2]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-5])\n                                } else if(otherUserInfo[otherUserInfo.length-5]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-2])\n                                }\n                                lastMessage = lastMessage[lastMessage.length-10]\n                                if(lastMessage){\n                                    lastMessage = Object.values(lastMessage)[1]\n                                    if(lastMessage.length+lastMessage.split(\" \").length > 31){\n                                        lastMessage = lastMessage.slice(0, 31)\n                                        lastMessage += \"...\"\n                                    }\n                                }\n                                allUserIDs.push(message.messageID)\n                                infoObject[\"message\"] = lastMessage\n                                infoObject[\"photoURL\"] = otherUserPhotoURL\n                                infoObject[\"displayName\"] = otherUserDisplayName\n                                infoObject[\"unread\"] = unreadCount\n                                if(snapshot.val().request===this.props.emailRedux&&snapshot.val().requestStatus==='pending'){\n                                    finalInfoObject[message.messageID] = infoObject\n                                    this.setState({\n                                        allInfo: finalInfoObject\n                                    })\n                                    messagesArray.push(message.messageID)\n                                }\n                            }\n                            if(document.getElementById('scroll-here')){\n                                document.getElementById('scroll-here').scrollIntoView();\n                            }\n                        })\n                        this.props.dispatch(addAllCurrentUserEmails(allUserEmails))\n                        this.props.dispatch(addAllCurrentUserIDs(allUserIDs))\n                    }\n                    this.setState({\n                        messages: messagesArray,\n                    })\n                }\n            }\n                \n        })\n    } \n\n    test = () => {\n    }\n\n    inboxToMessagesAsync = (messageID) => {\n        const runFunction = async () => {\n            await this.props.dispatch(isMessageRequest(true))\n            await this.props.newMessageRoute(messageID)\n            await document.getElementById('scroll-here').scrollIntoView();\n        }\n        runFunction()\n    } \n\n    componentDidMount(){\n        this.getMessageSummaries()\n    }\n    \n    render() {\n        return(\n            <div>\n                {/* <button onClick={(this.test)}>push</button> */}\n                {this.state.messages.length > 0 \n                ?\n                <div>\n                    \n                    {this.props.isInboxTab ? \n                    <div>Hellooo</div>\n                    :\n                        Object.values(this.state.allInfo).map((message, index)=> {\n                            return(\n                                <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatIDRedux===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessagesAsync(this.state.messages[index])} key={index}>\n                                    <ImageContainer>\n                                        <ProfileImage alt=\"user profile\" src={message.photoURL}></ProfileImage>\n                                    </ImageContainer>\n                                    <MessageContainer>\n                                        <InboxUser>{message.displayName}</InboxUser>\n                                        <InboxMessage >{message.message}</InboxMessage>\n                                    </MessageContainer>\n                                </InboxContainer>\n                                )\n                        })\n                    \n                    }\n                </div>\n                :\n                null\n                }\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Inbox)","import styled from \"styled-components\"\n\nexport const InboxContainerStyle = styled.div`\n    @media (max-width: 900px) {\n        width: 100vw;\n        height: 86vh; \n    }\n    @media (min-width: 900px) {\n        width: 400px;\n        height: 200px; \n    }\n`\n\nexport const TabsContainer = styled.div`\n    display: flex;\n    color: white;\n    justify-content: space-evenly;\n`\n\nexport const InboxTab = styled.div`\n    &:hover {\n        cursor: pointer\n    };\n    text-decoration: ${props=> (props.isSelected ? 'underline' : 'null')}\n`\n\nexport const RequestsTab = styled.div`\n    &:hover {\n        cursor: pointer;\n    };\n    text-decoration: ${props=> (props.isSelected ? 'null' : 'underline')}\n`","import React from \"react\"\nimport Inbox from \"./Inbox\"\nimport Requests from './Requests'\nimport { InboxContainerStyle } from \"../Styles/InboxContainer.styles\"\nimport Scroll from \"./Scroll\"\nimport { connect } from 'react-redux'\nimport { isInboxTab } from \"../Redux/actions/inboxActions\"\nimport { TabsContainer,\n    InboxTab,\n    RequestsTab, \n} from '../Styles/InboxContainer.styles'\n\nconst mapStateToProps = (state) => ({\n    isInboxTab: state.inbox.isInboxTab,\n    requestCount: state.requests.requestCount\n})\n\nconst InboxContainer = (props) => {\n    return(\n        <div>\n            <TabsContainer>\n                <InboxTab isSelected={props.isInboxTab} onClick={()=>props.dispatch(isInboxTab(true))}>Inbox</InboxTab>\n                <RequestsTab isSelected={props.isInboxTab} onClick={()=>props.dispatch(isInboxTab(false))}>Requests ({props.requestCount})</RequestsTab>\n            </TabsContainer>\n            {props.isInboxTab ? \n            <Scroll height=\"88vh\">\n                <InboxContainerStyle>\n                    <Inbox \n                    newMessageRoute={props.newMessageRoute}\n                    />\n                </InboxContainerStyle>\n            </Scroll>\n            :\n            <Scroll height=\"88vh\">\n                <InboxContainerStyle>\n                    <Requests \n                    newMessageRoute={props.newMessageRoute}\n                    />\n                </InboxContainerStyle>\n            </Scroll> \n            }\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps)(InboxContainer)","import styled from \"styled-components\"\n\nexport const NewMessageButton = styled.button`\n    height: 35px;\n    width: 40px;\n    cursor: pointer;\n    background-color: rgb(50,50,50);\n    color: white;\n    border: none;\n`\n\nexport const NewMessageInput = styled.input`\n    height: 30px;\n    width: 200px;\n    cursor: pointer;\n    background-color: gray;\n    color: white;\n    border: none;\n    margin: 0 5px 0 10px;\n`\n\nexport const NewMessageContainer = styled.div`\n    color: white;\n`","import React, { Component } from \"react\"\n// import firebase from \"./firebase\"\nimport { NewMessageButton, NewMessageInput, NewMessageContainer } from \"../Styles/NewMessage.styles\"\nimport { connect } from 'react-redux'\nimport { addMessages } from '../Redux/actions/appActions'\nimport { addCurrentChatID, addNewMessageOtherUserEmail } from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n    allUserEmailsRedux: state.app.allUserEmailsRedux,\n    emailRedux: state.app.emailRedux,\n    allCurrentUserEmailsRedux: state.app.allCurrentUserEmailsRedux,\n    allCurrentUserIDsRedux: state.app.allCurrentUserIDsRedux,\n})\n\nclass NewMessage extends Component {\n\n    state = {\n        email: \"\",\n        isUserExist: \"\",\n    }\n\n    handleEmail = (e) => {\n        this.setState({\n            email: e.target.value\n        })\n    }\n\n    createNewMessage = () => {\n        if(this.state.email.length>0){\n            const emailIndex = this.props.allCurrentUserEmailsRedux.indexOf(this.state.email)\n            if(emailIndex!==-1){\n                this.props.getMessages(this.props.allCurrentUserIDsRedux[emailIndex])\n                this.props.dispatch(addCurrentChatID(this.props.allCurrentUserIDsRedux[emailIndex]))\n                if(this.state.isUserExist===\"user does not exist\"){\n                    this.setState({\n                        isUserExist: \"\",\n                    })\n                }\n            }else{\n                // if(this.props.allUserEmailsRedux){\n                    for(let email of this.props.allUserEmailsRedux) {\n                        if(this.state.email===this.props.emailRedux){\n                            break\n                        }else if(email===this.state.email){\n                            this.props.dispatch(addMessages([]))\n                            this.props.dispatch(addCurrentChatID('NEW MESSAGE'))\n                            this.props.dispatch(addNewMessageOtherUserEmail(this.state.email))\n                            this.setState({\n                                isUserExist: \"\"\n                            })\n                            break\n                        }else{\n                            this.setState({\n                                isUserExist: \"user does not exist\"\n                            })\n                        }\n                    }\n                // }\n            }\n            document.getElementById(\"email-input\").value=\"\"\n        }\n    }\n\n    render() {\n        return(\n            <NewMessageContainer>\n                {/* New Message */}\n                <NewMessageInput className=\"br2\" id=\"email-input\" onChange={this.handleEmail} placeholder=\"enter email\"></NewMessageInput>\n                <NewMessageButton className=\"br2\" onClick={this.createNewMessage}>+</NewMessageButton>\n                <div>{this.state.isUserExist}</div>\n            </NewMessageContainer>\n        )\n    }\n} \n\nexport default connect(mapStateToProps)(NewMessage) ","import styled from \"styled-components\"\n\nexport const MobileContainer = styled.div`\n    @media (min-width: 900px){\n        display: none;\n    }\n`\n\nexport const ChatButtonsMobile = styled.div`\n    @media (min-width: 900px) {\n        display: none;\n    }\n`\n\nexport const AppContainer = styled.div`\n    width: 100%;\n`\n\nexport const LogOutButton = styled.button`\n    border: none;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(80, 80, 80);\n    margin: 5px 5px 5px 10px;\n`\n\nexport const LogInButton = styled.button`\n    border: none;\n    height: 5vh;\n    width: 20vw;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(18, 208, 255);\n    position: absolute;\n    top: 55%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-family: 'Lato';\n    font-size: 2vw;\n    &:hover {\n        background-color: green;\n    }\n`\n\nexport const InboxMessageContainer = styled.div`\n    display: flex;\n`\n\nexport const AppTitle = styled.div`\n    font-size: 6vw;\n    color: white;\n    font-family: 'Lato';\n    position: absolute;\n    top: 45%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`\n\nexport const HomepageContainer = styled.div`\n`\n\nexport const InboxMobile = styled.div`\n    @media (max-width: 900px) {\n        display: none;\n    }\n    display: flex;\n`","import React, { Component } from 'react';\n// import \"firebase/auth\"\n// import \"firebase/firestore\"\nimport InboxChatButtons from './InboxChatButtons'\nimport firebase, {auth, provider} from \"../firebase\"\nimport MessageContainer from \"./MessageContainer\"\nimport InboxContainer from \"./InboxContainer\"\nimport NewMessage from \"./NewMessage\"\nimport { AppContainer, \n  LogInButton, \n  InboxMessageContainer, \n  AppTitle,\n  LogOutButton,\n  HomepageContainer,\n  InboxMobile,\n  ChatButtonsMobile,\n  MobileContainer,\n} from \"../Styles/App.styles\"\nimport { connect } from 'react-redux'\nimport { \n  addUser,\n  addUserID,\n  addCurrentChatID,\n  addEmail,\n  addNewMessageOtherUserEmail,\n  addAllUserEmails,\n  addAllCurrentUserIDs,\n  addAllCurrentUserEmails,\n  addMessages,\n  preventScrollDown,\n  loadMessagesText,\n  isMessagesLoading,\n} from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n  messagesRedux: state.app.messagesRedux,\n  userRedux: state.app.userRedux,\n  currentChatIDRedux: state.app.currentChatIDRedux,\n  isMessageRequest: state.requests.isMessageRequest,\n  emailRedux: state.app.emailRedux,\n  quantityLoadMessages: state.app.quantityLoadMessages,\n  preventScrollDown: state.app.preventScrollDown,\n})\n\nclass App extends Component {\n  state = {\n    username: \"\",\n    showLogInButton: false,\n    isMessagesLoading: true,\n    isChat: true\n  }\n  \n  username = (e) => {\n    this.setState({\n      username: e.target.value\n    })\n  }\n  \n  stayLoggedIn = () => {\n    auth.onAuthStateChanged((user)=> {\n      if(user){\n        this.setState({\n          username: user.displayName,\n        })\n        this.props.dispatch(addEmail(user.email))\n        this.props.dispatch(addUserID(user.uid))\n        this.props.dispatch(addUser(user))\n        this.getUserInfo()\n      }else{\n        this.setState({\n          showLogInButton: true,\n        })\n      }\n    })\n  }\n\n  getUserInfo = () => {\n    const itemRef = firebase.database().ref(\"users\")\n    itemRef.on('value', (snapshot) => {\n      let users = snapshot.val()\n      let usersArray = []\n      for (let userId in users){\n        usersArray.push(users[userId].email)\n      }\n      this.props.dispatch(addAllUserEmails(usersArray))\n    })\n  }\n  \n  componentDidMount() {\n    this.stayLoggedIn()\n    // this.addUserData(\"Fiona\", \"fiona@orange.com\", \"https://lh3.googleusercontent.com/a-/AOh14GiEWMCD6XAm34qOIe9A3LcvcHcPToUSdOroPHcb\")\n  }\n\n  addUserData = (name, email, uid, photoURL) => {\n    const userData = {\n      name: name,\n      email: email,\n      dateCreated: Date.now(),\n      photoURL: photoURL,\n    }\n    firebase.database().ref(`users/${uid}`).set(userData)\n  }\n  \n  removeItem = (itemId) => {\n    const itemRef = firebase.database().ref(`/messages/${this.props.currentChatIDRedux}/${itemId}`)\n    itemRef.remove()\n  }\n  \n  logout = () => {\n    auth.signOut()\n    this.props.dispatch(addMessages([]))\n    this.props.dispatch(addAllCurrentUserIDs([]))\n    this.props.dispatch(addAllCurrentUserEmails([]))\n    this.props.dispatch(addAllUserEmails([]))\n    this.props.dispatch(addNewMessageOtherUserEmail(''))\n    this.props.dispatch(addEmail(''))\n    this.props.dispatch(addCurrentChatID(null))\n    this.props.dispatch(addUser(null))\n    this.props.dispatch(addUserID(''))\n  }\n\n  getMessages = (id) => {\n    const itemRef = firebase.database().ref(`messages/${id}`)\n    let limitMessages = itemRef.orderByKey().limitToLast(this.props.quantityLoadMessages)\n    limitMessages.on('value', (snapshot) => {\n      let items = snapshot.val()\n      let newState = []\n      if(items){\n        if(items['requestStatus']==='accepted'||items['request']!==this.props.emailRedux||(items['request']===this.props.emailRedux&&items['requestStatus']==='pending')){\n          for (let item in items) {\n            newState.push({\n              itemId: item,\n              user: items[item].user,\n              message: items[item].message,\n              email: items[item].email,\n              sent: items[item].sent,\n              read: items[item].read,\n              readTime: items[item].readTime,\n            })\n          }\n          if(this.props.messagesRedux){\n            if(this.props.messagesRedux.length+14===Object.keys(newState).length){\n              this.props.dispatch(loadMessagesText('No more messages'))\n            }\n          }\n          if(this.props.currentChatIDRedux===snapshot.ref_.path.pieces_[1]||this.props.currentChatIDRedux===id){\n            this.props.dispatch(addMessages(newState))\n          }\n        }\n      }\n      this.props.dispatch(isMessagesLoading(false))\n    })\n    if(!this.props.preventScrollDown){\n      document.getElementById('scroll-here').scrollIntoView()\n      this.props.dispatch(preventScrollDown(false))\n    }\n  }\n\n  login = () => {\n    auth.signInWithPopup(provider)\n    .then((result) => {\n      const user = result.user\n      this.setState({\n        user,\n        username: user.displayName\n      })\n      const userRef = firebase.database().ref(\"users\")\n      userRef.once('value', (snapshot)=>{\n        let users = snapshot.val()\n        let counter = 0\n        for (const userData in users){\n          if (users[userData].email===user.email){\n            counter++\n          }\n        }\n        if(counter===0){\n          this.addUserData(user.displayName, user.email, user.uid, user.photoURL)\n        }\n      })\n      this.getUserInfo()\n    })\n  }\n\n  newMessageRoute = (input) => {\n    const route = async () => {\n      await this.props.dispatch(addCurrentChatID(input))\n      await this.getMessages(input)\n    }\n    route()\n  }\n\n  test = () => {\n    console.log(this.state.allUserEmails)\n  }\n\n  isChat = (bool) => {\n    this.setState({\n      isChat: bool\n    })\n  }\n\n  render(){\n    return (\n      <AppContainer>\n        {this.props.userRedux ?\n          <LogOutButton className=\"br1 br3 pa2 ma1 dib\" onClick={this.logout}>\n            Log Out | {this.state.username}\n          </LogOutButton>             \n          :\n          (\n            this.state.showLogInButton ? \n          <HomepageContainer>\n            <AppTitle>Messaging App</AppTitle>\n            <LogInButton onClick={this.login}>LOG IN</LogInButton>              \n          </HomepageContainer>\n            :\n            null\n          )\n        }\n        {this.props.userRedux ? \n        <div>\n          <NewMessage \n          getMessages={this.getMessages}\n          newMessageRoute={this.newMessageRoute}\n          />\n          <ChatButtonsMobile>\n            <InboxChatButtons isChat={this.isChat} />\n          </ChatButtonsMobile>\n          <InboxMessageContainer>\n            <InboxMobile>\n              <InboxContainer newMessageRoute={this.newMessageRoute} />\n              <MessageContainer \n              newMessageRoute={this.newMessageRoute}\n              getMessages={this.getMessages}\n              usernameFunc={this.username}\n              usernameState={this.state.username}\n              removeItem={this.removeItem}\n              />\n            </InboxMobile>\n            <MobileContainer>\n              {this.state.isChat ? \n              <MessageContainer \n              newMessageRoute={this.newMessageRoute}\n              getMessages={this.getMessages}\n              usernameFunc={this.username}\n              usernameState={this.state.username}\n              removeItem={this.removeItem}\n              />\n              :\n              <InboxContainer \n              newMessageRoute={this.newMessageRoute}\n              />\n              }\n            </MobileContainer>\n          </InboxMessageContainer>\n        </div>\n        :\n        null\n        }\n      </AppContainer>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\"\n\nexport const IndexContainer = styled.div`\n    // background-color: rgb(28,28,28);\n    background-color: rgb(18,18,23)\n    color: white;\n`","import * as actions from '../actions/appActions'\n\nexport const initialState = {\n    userRedux: '',\n    userIDRedux: '',\n    currentChatIDRedux: null,\n    emailRedux: '',\n    newMessageOtherUserEmailRedux: '',\n    allUserEmailsRedux: [],\n    allCurrentUserEmailsRedux: [],\n    allCurrentUserIDsRedux: [],\n    messagesRedux: [],\n    quantityLoadMessages: 24,\n    preventScrollDown: false,\n    loadMessagesText: 'Load more messages',\n    isMessagesLoading: true,\n}\n\nexport default function appReducer(state=initialState, action) {\n    switch(action.type){\n        case actions.IS_MESSAGES_LOADING:\n            return {...state, isMessagesLoading: action.payload}\n        case actions.LOAD_MESSAGES_TEXT:\n            return{...state, loadMessagesText: action.payload}\n        case actions.PREVENT_SCROLL_DOWN:\n            return{...state, preventScrollDown: action.payload}\n        case actions.ADD_QUANTITY_LOAD_MESSAGES:\n            return{...state, quantityLoadMessages: state.quantityLoadMessages + action.payload}\n        case actions.ADD_MESSAGES:\n            return {...state, messagesRedux: action.payload}\n        case actions.ADD_ALL_CURRENT_USER_IDS:\n            return {...state, allCurrentUserIDsRedux: action.payload}\n        case actions.ADD_ALL_CURRENT_USER_EMAILS:\n            return{...state, allCurrentUserEmailsRedux: action.payload}\n        case actions.ADD_ALL_USER_EMAILS:\n            return {...state, allUserEmailsRedux: action.payload}\n        case actions.ADD_NEW_MESSAGE_OTHER_USER_EMAIL:\n            return {...state, newMessageOtherUserEmailRedux: action.payload}\n        case actions.ADD_EMAIL:\n            return {...state, emailRedux: action.payload}\n        case actions.ADD_CURRENT_CHAT_ID:\n            return {...state, currentChatIDRedux: action.payload}\n        case actions.ADD_USER:\n            return {...state, userRedux: action.payload}\n        case actions.ADD_USERID:\n            return{...state, userID: action.payload}\n        default:\n            return state\n    }\n}","import * as actions from '../actions/inboxActions'\n\nconst initialState = {\n    isInboxTab: true,\n    allInfoInbox: []\n}\n\nexport default function inboxReducer(state=initialState, action){\n    switch(action.type){\n        case actions.IS_INBOX_TAB:\n            return {...state, isInboxTab: action.payload}\n        case actions.ADD_ALL_INFO_INBOX:\n            return{...state, allInfoInbox: action.payload}\n        default:\n            return state\n    }\n}\n","export const ADD_INBOX_MESSAGES = \"ADD_INBOX_MESSAGES\"\nexport const ADD_ALL_INFO = 'ADD_ALL_INFO'\n\nexport const addInboxMessages = (messages) => {\n    return (dispatch) => {\n        dispatch({type: ADD_INBOX_MESSAGES, payload: messages})\n    }\n}\n\nexport const addAllInfo = (allInfo) => {\n    return(dispatch)=> {\n        dispatch({type: ADD_ALL_INFO, payload: allInfo})\n    }\n}","import * as actions from '../actions/inboxContainerActions'\n\nexport const initialState = {\n    messagesInboxRedux: [],\n    allInfoRedux: [],\n}\n\nexport default function inboxContainerReducer(state=initialState, action) {\n    switch (action.type){\n        case actions.ADD_INBOX_MESSAGES:\n            return {...state, messagesInboxRedux: action.payload}\n        case actions.ADD_ALL_INFO:\n            return {...state, allInfoRedux: action.payload}\n        default:\n            return state\n    }\n}\n","import * as actions from '../actions/requestsActions'\n\nexport const initialState = {\n    requestCount: 0,\n    isMessageRequest: false,\n}\n\nexport default function requestsReducer(state=initialState, action) {\n    switch(action.type) {\n        case actions.ADD_REQUEST_COUNT:\n            return {...state, requestCount: action.payload}\n        case actions.IS_MESSAGE_REQUEST:\n            return {...state, isMessageRequest: action.payload}\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport appReducer from './appReducer'\nimport inboxReducer from './inboxReducer'\nimport inboxContainerReducer from './inboxContainerReducer'\nimport requestsReducer from './requestsReducer'\n\nconst rootReducer = combineReducers ({\n    app: appReducer,\n    inbox: inboxReducer,\n    inboxContainer: inboxContainerReducer,\n    requests: requestsReducer,\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { IndexContainer } from \"./Styles/Index.styles\"\nimport 'tachyons';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\"\nimport rootReducer from './Redux/reducers/rootReducer'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <IndexContainer>\n        <App />\n      </IndexContainer>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}