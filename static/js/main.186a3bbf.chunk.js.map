{"version":3,"sources":["firebase.js","Styles/MessageInput.styles.js","Redux/actions/appActions.js","Components/MessageInput.js","Styles/Messages.styles.js","Components/Messages.js","Components/Scroll.js","Styles/MessageContainer.styles.js","Redux/actions/inboxActions.js","Redux/actions/requestsActions.js","Styles/RequestButtons.styles.js","Components/RequestButtons.js","Components/MessageContainer.js","UnreadCircle.svg","Styles/Inbox.styles.js","Components/Inbox.js","Components/Requests.js","Styles/InboxContainer.styles.js","Components/InboxContainer.js","Styles/NewMessage.styles.js","Components/NewMessage.js","Styles/App.styles.js","Components/App.js","serviceWorker.js","Styles/Index.styles.js","Redux/reducers/appReducer.js","Redux/reducers/inboxReducer.js","Redux/actions/inboxContainerActions.js","Redux/reducers/inboxContainerReducer.js","Redux/reducers/requestsReducer.js","Redux/reducers/rootReducer.js","index.js"],"names":["provider","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","GoogleAuthProvider","MessageInputContainer","styled","div","MessageInputArea","textarea","MessageInputButton","button","loadMessagesText","text","dispatch","type","payload","preventScrollDown","boolean","addQuantityLoadMessages","quantity","addMessages","messages","addAllCurrentUserIDs","allCurrentUserIDs","addAllCurrentUserEmails","allCurrentUserEmails","addAllUserEmails","allUserEmails","addNewMessageOtherUserEmail","otherUserEmail","addEmail","email","addCurrentChatID","currentChatID","addUser","user","addUserID","userID","MessageInput","state","message","submitFunction","messageRef","messageID","otherUserID","otherUserDisplayName","otherUserPhotoURL","database","ref","once","snapshot","userIndex","props","allUserEmailsRedux","indexOf","newMessageOtherUserEmailRedux","userInfoArray","Object","keys","val","name","photoURL","addMessageID","addMessageIDToOtherUser","messagesRedux","length","newMessageRoute","itemRef","messageInfo","lastMessage","Date","now","user1Photo","user2Photo","userRedux","user1Email","user2Email","user1","user2","displayName","request","requestStatus","push","then","collectionRef","path","pieces_","pop","update","usernameState","read","emailRedux","sent","document","getElementById","value","test","currentChatIDRedux","messageRefValues","values","userMessageIDs","id","lastUpdated","setState","submitFunctionAsync","a","getMessages","runFunction","submit","e","keyCode","shiftKey","preventDefault","handleMessageChange","target","clearUnread","messageKeys","messageValues","reverse","splice","valueIndex","readTime","className","onClick","onChange","this","placeholder","addEventListener","Component","connect","app","MessageOptionsContainer","isCurrentUser","UserMessageStyle","NewMessageHeader","MessagesContainer","Delete","Options","showOptions","Seen","ShowHideMessages","show","hide","onMouseLeave","userMessage","itemID","index","messagesQuantity","moment","unix","calendar","toLowerCase","removeItem","Number","Messages","itemId","remove","map","key","Scroll","style","overflow","border","height","display","flexDirection","children","MessageContainerStyles","LoadContainer","LoadMore","isInboxTab","inboxTabBool","addAllInfoInbox","info","addRequestCount","requestCount","isMessageRequest","isRequestBool","RequestButtonsContainer","DeleteButton","AcceptButton","accept","input","MessageContainer","loadMoreMessages","usernameFunc","username","requests","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","cx","cy","r","fill","_ref","svgRef","title","width","ForwardRef","forwardRef","InboxContainer","isCurrentThread","ImageContainer","ProfileImage","img","InboxUser","InboxMessage","UndreadContainer","UnreadStyles","UnreadCircle","compareLastMessageTimestamp","b","comparison","Inbox","allInfo","getMessageSummaries","currentUser","uid","on","messagesSnapshot","sort","messagesArray","requestArray","allUserIDs","finalInfoObject","loopIndex","messageSummary","infoObject","unreadMessages","unreadCount","unreadMessage","otherUserInfo","split","slice","scrollIntoView","console","log","inboxToMessages","inboxToMessagesAsync","getMessageSummariesAsync","allInfoInbox","alt","src","unread","inbox","InboxContainerStyle","TabsContainer","InboxTab","isSelected","RequestsTab","Requests","NewMessageButton","NewMessageInput","NewMessageContainer","NewMessage","isUserExist","handleEmail","createNewMessage","emailIndex","allCurrentUserEmailsRedux","allCurrentUserIDsRedux","AppContainer","LogOutButton","LogInButton","InboxMessageContainer","AppTitle","HomepageContainer","App","stayLoggedIn","onAuthStateChanged","getUserInfo","users","usersArray","userId","addUserData","userData","dateCreated","set","logout","signOut","orderByKey","limitToLast","quantityLoadMessages","items","newState","item","ref_","login","signInWithPopup","result","counter","route","Boolean","window","location","hostname","match","IndexContainer","initialState","userIDRedux","messagesInboxRedux","allInfoRedux","rootReducer","combineReducers","action","inboxContainer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.186a3bbf.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyDVflBKJPhm5bNZfYL5yoqT66NfyiPQgT0\",\n    authDomain: \"messages-598f6.firebaseapp.com\",\n    databaseURL: \"https://messages-598f6.firebaseio.com\",\n    projectId: \"messages-598f6\",\n    storageBucket: \"messages-598f6.appspot.com\",\n    messagingSenderId: \"1044285096751\",\n    appId: \"1:1044285096751:web:f00b017ec43ce7dd2557da\",\n    measurementId: \"G-KRSD66CD2T\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(config)\nconst db = firebaseApp.firestore()\n\nexport { db }\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\n\nexport default firebase","import styled from 'styled-components'\n\nexport const MessageInputContainer = styled.div`\n    margin-top: 10px;\n    display: flex;\n    width: 100%;\n`\n \nexport const MessageInputArea = styled.textarea`\n    height: 5vh;\n    width: 93%;\n    background-color: grey;\n    border: none;\n    color: white;\n`\n \nexport const MessageInputButton = styled.button`\n    &:hover {\n        cursor: pointer\n    }\n`","export const ADD_USER = \"ADD_USER\"\nexport const ADD_USERID = \"ADD_USERID\"\nexport const ADD_CURRENT_CHAT_ID = \"ADD_CURRENT_CHAT_ID\"\nexport const ADD_EMAIL = \"ADD_EMAIL\"\nexport const ADD_NEW_MESSAGE_OTHER_USER_EMAIL = 'ADD_NEW_MESSAGE_OTHER_USER_EMAIL'\nexport const ADD_ALL_USER_EMAILS = 'ADD_ALL_USER_EMAILS'\nexport const ADD_ALL_CURRENT_USER_EMAILS = 'ADD_ALL_CURRENT_USER_EMAILS'\nexport const ADD_ALL_CURRENT_USER_IDS = 'ADD_ALL_CURRENT_USER_IDS'\nexport const ADD_MESSAGES = 'ADD_MESSAGES'\nexport const ADD_QUANTITY_LOAD_MESSAGES = 'ADD_QUANTITY_LOAD_MESSAGES'\nexport const PREVENT_SCROLL_DOWN = 'PREVENT_SCROLL_DOWN'\nexport const LOAD_MESSAGES_TEXT = 'LOAD_MESSAGES_TEXT'\n\nexport const loadMessagesText = (text) => {\n    return(dispatch)=> {\n        dispatch({type: LOAD_MESSAGES_TEXT, payload: text})\n    }\n}\n\nexport const preventScrollDown = (boolean) => {\n    return(dispatch)=> {\n        dispatch({type:PREVENT_SCROLL_DOWN, payload: boolean})\n    } \n}\n\nexport const addQuantityLoadMessages = (quantity) => {\n    return(dispatch) => {\n        dispatch({type: ADD_QUANTITY_LOAD_MESSAGES, payload: quantity})\n    }\n}\n\nexport const addMessages = (messages) => {\n    return (dispatch) => {\n        dispatch({type: ADD_MESSAGES, payload: messages})\n    }\n}\n\nexport const addAllCurrentUserIDs = (allCurrentUserIDs) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_CURRENT_USER_IDS, payload: allCurrentUserIDs})\n    }\n}\n\nexport const addAllCurrentUserEmails = (allCurrentUserEmails) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_CURRENT_USER_EMAILS, payload: allCurrentUserEmails})\n    }\n}\n\nexport const addAllUserEmails = (allUserEmails) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_USER_EMAILS, payload: allUserEmails})\n    }\n}\n\nexport const addNewMessageOtherUserEmail = (otherUserEmail) => {\n    return(dispatch) => {\n        dispatch({type: ADD_NEW_MESSAGE_OTHER_USER_EMAIL, payload: otherUserEmail})\n    }\n}\n\nexport const addEmail = (email) => {\n    return(dispatch) => {\n        dispatch({type: ADD_EMAIL, payload: email})\n    }\n}\n\nexport const addCurrentChatID = (currentChatID) => {\n    return(dispatch) => {\n        dispatch({type: ADD_CURRENT_CHAT_ID, payload: currentChatID})\n    }\n}\n\nexport const addUser = (user) => {\n    return(dispatch) => {\n        dispatch({ type: ADD_USER, payload: user })\n    }\n}\n\nexport const addUserID = (userID) => {\n    return(dispatch)=>{\n        dispatch({type: ADD_USERID, payload: userID})\n    }\n}","import React, { Component } from \"react\"\nimport firebase from \"firebase\"\nimport { MessageInputContainer, \n    MessageInputArea, \n    MessageInputButton, \n} from '../Styles/MessageInput.styles'\nimport { connect } from 'react-redux'\nimport { addCurrentChatID, addQuantityLoadMessages } from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n    allUserEmailsRedux: state.app.allUserEmailsRedux,\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    newMessageOtherUserEmailRedux: state.app.newMessageOtherUserEmailRedux,\n    userID: state.app.userID,\n    userRedux: state.app.userRedux,\n})\n \nclass MessageInput extends Component {\n\n    state = {\n        message: ''\n    }\n\n\n\n    submitFunction = () => {\n        let messageRef\n        let messageID\n        let otherUserID\n        let otherUserDisplayName\n        let otherUserPhotoURL\n        let otherUserEmail\n        const userIdRef = firebase.database().ref('users')\n        userIdRef.once('value', (snapshot)=> {\n            const userIndex = this.props.allUserEmailsRedux.indexOf(this.props.newMessageOtherUserEmailRedux)\n            const userInfoArray = Object.keys(snapshot.val())\n            otherUserID = userInfoArray[userIndex]\n            if(userIndex!==-1){\n                otherUserDisplayName = snapshot.val()[otherUserID].name\n                otherUserPhotoURL = snapshot.val()[otherUserID].photoURL\n                otherUserEmail = snapshot.val()[otherUserID].email\n            }\n        })\n        const addMessageID = firebase.database().ref(`users/${this.props.userID}/messages`)\n        let addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n        if(this.props.messagesRedux.length===0){\n            this.props.newMessageRoute()\n            const itemRef = firebase.database().ref(\"messages\")\n            const messageInfo = {\n                lastMessage: Date.now(),\n                user1Photo: otherUserPhotoURL,\n                user2Photo: this.props.userRedux.photoURL,\n                user1Email: otherUserEmail,\n                user2Email: this.props.userRedux.email,\n                user1: otherUserDisplayName,\n                user2: this.props.userRedux.displayName,\n                request: otherUserEmail,\n                requestStatus: 'pending',\n            }\n            itemRef.push(messageInfo)\n            .then((collectionRef)=>{\n                messageID = collectionRef.path.pieces_.pop()\n                this.props.dispatch(addCurrentChatID(messageID))\n                addMessageID.push({\n                    messageID: messageID,\n                    lastMessage: Date.now(),\n                })\n\n                addMessageIDToOtherUser.push({\n                    messageID: messageID,\n                    lastMessage: Date.now(),\n                })\n\n                messageRef = firebase.database().ref(`messages/${messageID}`)\n                messageRef.update({\n                    lastMessage: Date.now()\n                })\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.emailRedux,\n                    sent: Date.now(),\n                }\n                messageRef.push(message)\n                // this.props.getMessages(this.props.currentChatIDRedux)\n                document.getElementById(\"message-input\").value=\"\"\n            })\n        }else{\n            const noEmptyMessage = /^(?!\\s*$).+/\n            if(noEmptyMessage.test(this.state.message)){\n                messageRef = firebase.database().ref(`messages/${this.props.currentChatIDRedux}`)\n                messageRef.once('value', (snapshot)=> {\n                    let messageRefValues = snapshot.val()\n                    messageRefValues = Object.values(messageRefValues)\n                    if(this.props.emailRedux!==messageRefValues[messageRefValues.length-2]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-2]\n                    }else if (this.props.emailRedux!==messageRefValues[messageRefValues.length-5]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-5]\n                    }\n                })\n                this.props.dispatch(addQuantityLoadMessages(1))\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.emailRedux,\n                    sent: Date.now(),\n                }\n                messageRef.push(message)\n                messageRef.update({\n                    lastMessage: Date.now()\n                })\n                const messageRefTest = firebase.database().ref('users')\n                messageRefTest.once('value', (snapshot)=> {\n                    for (let userID in snapshot.val()){\n                        if(snapshot.val()[userID].email===otherUserEmail){\n                            otherUserID = userID\n                        }\n                    }\n                })\n                addMessageID.once('value', (snapshot)=> {\n                    const userMessageIDs = snapshot.val()\n                    for (let id in userMessageIDs){\n                        if (userMessageIDs[id].messageID  === this.props.currentChatIDRedux){\n                            const idTimestampRef = firebase.database().ref(`users/${this.props.userID}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n                addMessageIDToOtherUser.once('value', (snapshot)=> {\n                    for (let id in snapshot.val()){\n                        if (snapshot.val()[id].messageID  === this.props.currentChatIDRedux){\n                            const idTimestampRef = firebase.database().ref(`users/${otherUserID}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                const lastUpdatedRef = firebase.database().ref(`users/${this.props.userID}`)\n                lastUpdatedRef.update({\n                    lastUpdated: Date.now()\n                })\n                this.setState({\n                    message: ''\n                })\n                document.getElementById(\"message-input\").value=\"\"\n            }\n        }\n    }\n\n    submitFunctionAsync = () => {\n        const runFunction = async () => {\n            await this.submitFunction()\n            await this.props.getMessages(this.props.currentChatIDRedux)\n        }\n        runFunction()\n    }\n\n    submit = (e) => {\n        if (e.keyCode){\n            if (e.keyCode===13 && !e.shiftKey){\n                e.preventDefault()\n                this.submitFunctionAsync()\n            }\n        }else{\n            this.submitFunctionAsync()\n        }\n    }\n\n    handleMessageChange = (e) => {\n        this.setState({\n          message: e.target.value\n        })\n    }\n\n    clearUnread = (messageID) => {\n        if(this.props.messagesRedux.length>0){\n            const messageRef = firebase.database().ref(`messages/${messageID}`)\n            messageRef.once('value', (snapshot) => {\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,9)\n                messageValues.reverse().splice(0,9)\n                let valueIndex = 0\n                for (let value of messageValues) {\n                    if(value.read===false){\n                        if(value.email !== this.props.emailRedux){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[valueIndex]}`)\n                            firebaseMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                            valueIndex++\n                        }\n                    }else{\n                        break\n                    }\n                }\n            })\n        }\n    }\n\n    render(){\n        return(\n            <MessageInputContainer>\n                <MessageInputArea className=\"br3\" onClick={()=>this.clearUnread(this.props.currentChatIDRedux)} id=\"message-input\" onChange={this.handleMessageChange} placeholder=\"enter message\"></MessageInputArea>\n                <MessageInputButton onClick={this.submit}>Send</MessageInputButton>\n            </MessageInputContainer>\n        ) \n    }\n    componentDidMount(){\n        document.addEventListener(\"keypress\", this.submit)\n    }\n}\n\nexport default connect(mapStateToProps)(MessageInput)","import styled from \"styled-components\"\n\nexport const MessageOptionsContainer = styled.div`\n    display: flex;\n    flex-direction: ${props => (props.isCurrentUser ? \"row-reverse\" : \"row\")};\n    align-items: center;\n`\n\nexport const UserMessageStyle = styled.div`\n    color: white;\n    background-color: ${props => (props.isCurrentUser ? \"rgb(45, 45, 45)\" : \"rgb(80, 80, 80)\")};\n    border: rgb(20,20,20) solid 1px;\n    max-width: 45%;\n    min-width: 15%;\n    word-wrap:break-word;\n    &:hover {\n        cursor: pointer\n    }\n`\n\nexport const NewMessageHeader = styled.div`\n    color: white;\n`\n\nexport const MessagesContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n\nexport const Delete = styled.button`\n    color: white;\n    border: none;\n    background-color: rgb(45, 45, 45);\n    &:hover {\n        cursor:pointer\n    }\n`\n\nexport const Options = styled.div`\n    margin-top: 1rem;\n    background: rgb(70,70,70);\n    visibility: ${props=> (props.showOptions ?  'null': 'hidden')};\n`\n\nexport const Seen = styled.div`\n    font-size: 10px;\n`","import React, { Component } from \"react\"\nimport { UserMessageStyle,\n     NewMessageHeader, \n     MessagesContainer, \n     Options, \n     MessageOptionsContainer,\n     Delete,\n     Seen,\n} from  \"../Styles/Messages.styles\"\nimport { connect } from 'react-redux'\n// import { addQuantityLoadMessages } from '../Redux/actions/appActions'\nimport firebase from '../firebase'\nimport moment from 'moment'\n\nconst mapStateToProps = (state) => ({\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    newMessageOtherUserEmailRedux: state.app.newMessageOtherUserEmailRedux,\n})\n\nclass ShowHideMessages extends Component {\n    state = {\n        showOptions: false,\n    }\n\n    show = () => {\n        this.setState({\n            showOptions: true\n        })\n    }\n\n    hide = () => {\n        this.setState({\n            showOptions: false\n        })\n    }\n\n    render() {\n        return(\n            this.props.message ? \n            <MessageOptionsContainer onMouseLeave={this.hide} isCurrentUser={this.props.emailRedux===this.props.email ? true : false}>\n                <UserMessageStyle isCurrentUser={this.props.emailRedux===this.props.email ? true : false} onClick={this.show} className={this.props.user===this.props.userMessage ? \"current-user grow br3 pa3 ma1 dib bw2 shadow-5\" : \"other-user grow br3 pa3 ma2 dib bw2 shadow-5\"}>\n                    {this.props.itemID!==\"lastMessage\"&&this.props.itemID!==\"user1\"&&this.props.itemID!==\"user2\"&&this.props.itemID!==\"user2Photo\"&&this.props.itemID!==\"user1Photo\"&&this.props.itemID!==\"user2Email\"&&this.props.itemID!==\"user1Email\" ? \n                    <div>\n                        {this.props.message}\n                        {(this.props.index===this.props.messagesQuantity-10)&&(this.props.readTime>0)&&(this.props.email===this.props.emailRedux) ? \n                        <Seen>Seen {moment.unix(this.props.readTime/1000).calendar().toLowerCase()}</Seen>\n                        :\n                        null\n                        }\n                    </div>\n                    : \n                    null\n                    }\n                </UserMessageStyle>\n                <Options isCurrentUser={this.props.emailRedux===this.props.email ? true : false} className='br3 pa2 ma1 dib shadow-5' showOptions={this.state.showOptions}>\n                    {this.props.emailRedux===this.props.email ? \n                    <Delete onClick={()=>this.props.removeItem(this.props.itemID)}>Delete</Delete>\n                    :\n                    null\n                    }\n                    <div>{moment.unix(Number(this.props.sent)/1000).calendar()}</div>\n                </Options>\n            </MessageOptionsContainer>\n            : \n            null\n        )\n    }\n}\n\nclass Messages extends Component {\n    removeItem = (itemId) => {\n        const itemRef = firebase.database().ref(`/messages/${this.props.currentChatIDRedux}/${itemId}`)\n        itemRef.remove()\n    }\n\n    render() {\n        return(\n            <MessagesContainer>\n                {/* <button onClick={()=>console.log(props.messagesRedux)}>push</button> */}\n                {this.props.currentChatIDRedux===\"NEW MESSAGE\" ? \n                    <NewMessageHeader>\n                        Send new message to: {this.props.newMessageOtherUserEmailRedux}\n                    </NewMessageHeader>\n                    :\n                    null\n                }\n                {this.props.messagesRedux.map((message, index)=> {\n                    return(\n                        <ShowHideMessages \n                        messagesQuantity={this.props.messagesRedux.length}\n                        index={index}\n                        readTime={message.readTime}\n                        emailRedux={this.props.emailRedux}\n                        removeItem={this.removeItem}\n                        key={index}\n                        message={message.message}\n                        email={message.email}\n                        userMessage={message.user}\n                        itemID={message.itemId}\n                        sent={message.sent}\n                        />\n                    )\n                })}\n            </MessagesContainer>\n        )\n    }\n}\n\n// export default Messages\n\nexport default connect(mapStateToProps)(Messages)","import React from \"react\"\n\nconst Scroll = (props) => {\n    return(\n        // <div style={{overflow: \"scroll\", border: \"5px black\", height: props.height, display:\"flex\", flexDirection:\"column-reverse\"}}>\n        <div style={{overflow: \"scroll\", border: \"5px black\", height: props.height, display:props.display, flexDirection:props.flexDirection}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import styled from \"styled-components\"\n\nexport const MessageContainerStyles = styled.div`\n    border: 5px solid rgb(30,30,30);\n    height: 81vh;\n    width: 50vw;\n`\n\nexport const LoadContainer = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nexport const LoadMore = styled.button`\n    color: white;\n    background-color: rgb(40,40,40);\n    border: none;\n`","export const IS_INBOX_TAB = \"IS_INBOX_TAB\"\nexport const ADD_ALL_INFO_INBOX = 'ADD_ALL_INFO_INBOX'\n\nexport const isInboxTab = (inboxTabBool) => {\n    return(dispatch) => {\n        dispatch({type: IS_INBOX_TAB, payload: inboxTabBool})\n    }\n}\n\nexport const addAllInfoInbox = (info) => {\n    return(dispatch) => {\n        dispatch({type:ADD_ALL_INFO_INBOX, payload: info})\n    }\n}","export const ADD_REQUEST_COUNT = 'ADD_REQUEST_COUNT'\nexport const IS_MESSAGE_REQUEST = 'IS_MESSAGE_REQUEST'\n\nexport const addRequestCount = (requestCount) => {\n    return(dispatch) => {\n        dispatch({type: ADD_REQUEST_COUNT, payload: requestCount})\n    }\n}\n\nexport const isMessageRequest = (isRequestBool) => {\n    return(dispatch) => {\n        dispatch({type: IS_MESSAGE_REQUEST, payload: isRequestBool})\n    }\n}","import styled from 'styled-components'\n\nexport const RequestButtonsContainer = styled.div`\n    display: flex;\n    width: 50vw;\n`\n\nexport const DeleteButton = styled.button`\n    background-color: rgb(40,40,40);\n    color: white;\n    border: none;\n    justify-content: center;\n    &:hover{\n        cursor:pointer\n    }\n`\n\nexport const AcceptButton = styled.button`\n    background-color: rgb(40,40,40);\n    color: white;\n    border: none;\n    justify-content: center;\n    &:hover{\n        cursor:pointer\n    }\n`","import React from 'react'\nimport firebase from '../firebase'\nimport { connect } from 'react-redux'\nimport { isInboxTab } from '../Redux/actions/inboxActions'\nimport { isMessageRequest } from '../Redux/actions/requestsActions'\nimport { addMessages, addCurrentChatID } from '../Redux/actions/appActions'\nimport { RequestButtonsContainer,\n    DeleteButton,\n    AcceptButton,\n} from '../Styles/RequestButtons.styles'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    userID: state.app.userID,\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n})\n\n\nconst RequestButtons = (props) => {\n    const clearUnread = (messageID) => {\n        if(props.messagesRedux.length>0){\n            const messageRef = firebase.database().ref(`messages/${messageID}`)\n            messageRef.once('value', (snapshot) => {\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,9)\n                messageValues.reverse().splice(0,9)\n                let valueIndex = 0\n                for (let value of messageValues) {\n                    if(value.read===false){\n                        if(value.email !== props.emailRedux){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[valueIndex]}`)\n                            firebaseMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                            valueIndex++\n                        }\n                    }else{\n                        break\n                    }\n                }\n            })\n        }\n    }\n    const accept = (input) => {\n        const acceptRef = firebase.database().ref(`messages/${props.currentChatIDRedux}`)\n        acceptRef.update({\n            requestStatus: input\n        })\n        const lastUpdatedRef = firebase.database().ref(`users/${props.userID}`)\n        lastUpdatedRef.update({\n            lastUpdated: Date.now()\n        })\n        if (input===\"accepted\"){\n            props.dispatch(isInboxTab(true))\n            props.dispatch(isMessageRequest(false))\n            clearUnread(props.currentChatIDRedux)\n        }else{\n            props.dispatch(addMessages([]))\n            props.dispatch(addCurrentChatID(null))\n        }\n    }\n    return(\n        <RequestButtonsContainer>\n            <DeleteButton onClick={()=>accept('rejected')} className='br2'>Delete</DeleteButton>\n            <AcceptButton onClick={()=>accept('accepted')} className='br2'>Accept</AcceptButton>\n        </RequestButtonsContainer>\n    )\n}\n\nexport default connect(mapStateToProps)(RequestButtons)","import React, { Component } from \"react\"\nimport MessageInput from \"./MessageInput\"\nimport Messages from \"./Messages\"\nimport Scroll from \"./Scroll\" \nimport { \n    MessageContainerStyles, \n    LoadMore, \n    LoadContainer\n} from \"../Styles/MessageContainer.styles\"\nimport { connect } from 'react-redux'\nimport RequestButtons from \"./RequestButtons\"\n\nimport { \n    addQuantityLoadMessages,\n    preventScrollDown,\n} from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    messagesRedux: state.app.messagesRedux,\n    isMessageRequest: state.requests.isMessageRequest,\n    loadMessagesText: state.app.loadMessagesText\n})\n\nclass MessageContainer extends Component {\n\n    loadMoreMessages = () => {\n        const runFunction = async () => {\n            await this.props.dispatch(preventScrollDown(true))\n            await this.props.dispatch(addQuantityLoadMessages(15))\n            await this.props.getMessages(this.props.currentChatIDRedux)\n        }\n        runFunction()\n    }\n\n    render() {\n        return(\n            <div>\n                <MessageContainerStyles className=\"message-container\">\n                    <Scroll height=\"79vh\">\n                    {this.props.messagesRedux.length > 23 ? \n                    <LoadContainer>\n                        <LoadMore onClick={this.loadMoreMessages}>{this.props.loadMessagesText}</LoadMore>\n                    </LoadContainer>\n                    :\n                    null\n                    }\n                        <Messages \n                        removeItem={this.props.removeItem} \n                        user={this.props.usernameState}\n                        />\n                        <div id=\"scroll-here\"></div>\n                    </Scroll>\n                </MessageContainerStyles>\n                    {this.props.currentChatIDRedux!==null ? \n                    (this.props.isMessageRequest ? \n                        <RequestButtons />\n                        :\n                        <MessageInput \n                        newMessageRoute={this.props.newMessageRoute}\n                        usernameState={this.props.usernameState}\n                        getMessages={this.props.getMessages} \n                        usernameFunc={this.props.username} \n                        />\n                        )\n                    :\n                    null\n                    }  \n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(MessageContainer)","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 20,\n  cy: 20,\n  r: 16,\n  fill: \"rgb(26, 26, 26)\"\n});\n\nvar SvgUnreadCircle = function SvgUnreadCircle(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 40,\n    width: 40,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgUnreadCircle, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/UnreadCircle.8c406109.svg\";\nexport { ForwardRef as ReactComponent };","import styled from \"styled-components\"\nimport { ReactComponent as UnreadCircle } from '../UnreadCircle.svg'\n\nexport const InboxContainer = styled.div`\n    height: 90px;\n    cursor: pointer;\n    border: solid rgb(5,5,5) 1px;\n    background-color: ${props=>(props.isCurrentThread ? \"rgb(100,100,100) \" : \"rgb(40,40,40)\")} ;\n    color: white;\n    display: flex;\n    width: 97%;\n`\n\nexport const ImageContainer = styled.div`\n    width: 25%;\n    float: left;\n    align-items: center;\n`\n\nexport const ProfileImage = styled.img`\n    padding-left: 10px;\n    height: 60px;\n    width: 60px;\n`\n\nexport const MessageContainer = styled.div`\n    float: left;\n    width: 50%;\n    height: 50%;\n`\n\nexport const InboxUser = styled.div`\n    font-size: 20px;\n`\n\nexport const InboxMessage = styled.div`\n    word-wrap:break-word;\n`\n\n\nexport const UndreadContainer = styled.div`\n    float: right;\n    width: 25%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nexport const UnreadCircleIcon = styled(UnreadCircle)`\n\n`\n\nexport const UnreadStyles = styled.div`\n    position: absolute;\n`\n\n","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport { \n    InboxMessage, \n    ProfileImage, \n    InboxContainer, \n    UnreadStyles,\n    UndreadContainer, \n    ImageContainer,\n    MessageContainer,\n    InboxUser,\n} from \"../Styles/Inbox.styles\"\nimport { ReactComponent as UnreadCircle } from \"../UnreadCircle.svg\"\nimport { connect } from 'react-redux'\nimport { addAllCurrentUserEmails, addAllCurrentUserIDs } from '../Redux/actions/appActions'\nimport { addRequestCount, isMessageRequest } from \"../Redux/actions/requestsActions\"\nimport { addAllInfoInbox } from '../Redux/actions/inboxActions'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    emailRedux: state.app.emailRedux,\n    isInboxTab: state.inbox.isInboxTab,\n    requestCount: state.requests.requestCount,\n    allInfoInbox: state.inbox.allInfoInbox,\n    messagesRedux: state.app.messagesRedux,\n    userRedux: state.app.userRedux,\n})\n\nconst compareLastMessageTimestamp = (a, b) => {\n    let comparison = 0\n    if (a.lastMessage < b.lastMessage){\n        comparison = 1\n    } else if (a.lastMessage > b.lastMessage){\n        comparison = -1\n    } \n    return comparison\n}\n\nclass Inbox extends Component {\n\n    state = {\n        messages: [],\n        allInfo: [],\n    }\n\n    getMessageSummaries = () => {\n        const userID = firebase.auth().currentUser\n        const messagesRef = firebase.database().ref(`users/${userID.uid}`)\n        messagesRef.on('value', (snapshot)=> {\n            const messagesSnapshot = snapshot.val()\n            if(messagesSnapshot){\n                if(messagesSnapshot.messages){\n                    let messageInfo = Object.values(messagesSnapshot.messages)\n                    messageInfo = messageInfo.sort(compareLastMessageTimestamp)\n                    let messagesArray = []\n                    let requestArray = []\n                    let allUserIDs = []\n                    let allUserEmails = []\n                    let finalInfoObject = {}\n                    for (let message of messageInfo){\n                        let loopIndex = 0\n                        const messageSummary = firebase.database().ref(`messages/${message.messageID}`)\n                        let lastMessage \n                        messageSummary.on('value', (snapshot)=> {\n                            if(snapshot.val()){\n                                let infoObject = {}\n                                lastMessage = Object.values(snapshot.val())\n                                let unreadMessages = Object.values(snapshot.val())\n                                unreadMessages.reverse().splice(0,9)\n                                let unreadCount = 0\n                                for (let unreadMessage of unreadMessages) {\n                                    if(unreadMessage.read===false){\n                                        if(unreadMessage.email!==userID.email){\n                                            unreadCount++\n                                        }\n                                    }else{\n                                        break\n                                    }\n                                }\n                                const otherUserInfo = Object.values(snapshot.val())\n                                let otherUserDisplayName \n                                let otherUserPhotoURL\n                                if (otherUserInfo[otherUserInfo.length-3]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-6]\n                                } else {\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-3]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-1]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-4]\n                                } else {\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-1]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-2]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-5])\n                                } else {\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-2])\n                                }\n                                lastMessage = lastMessage[lastMessage.length-10]\n                                if(lastMessage){\n                                    lastMessage = Object.values(lastMessage)[1]\n                                    if(lastMessage.length+lastMessage.split(\" \").length > 31){\n                                        lastMessage = lastMessage.slice(0, 31)\n                                        lastMessage += \"...\"\n                                    }\n                                }\n                                allUserIDs.push(message.messageID)\n                                infoObject[\"message\"] = lastMessage\n                                infoObject[\"photoURL\"] = otherUserPhotoURL\n                                infoObject[\"displayName\"] = otherUserDisplayName\n                                infoObject[\"unread\"] = unreadCount\n                                if(snapshot.val().requestStatus==='accepted'||snapshot.val().request!==this.props.emailRedux){\n                                    finalInfoObject[message.messageID] = infoObject\n                                    this.setState({\n                                        allInfo: finalInfoObject\n                                    })\n                                    this.props.dispatch(addAllInfoInbox(finalInfoObject))\n                                    messagesArray.push(message.messageID)\n                                }\n                                if(snapshot.val().request===this.props.emailRedux&&snapshot.val().requestStatus==='pending'){\n                                    requestArray.push(message.messageID)\n                                }else{\n                                    if(loopIndex>-1){\n                                        if(this.props.currentChatIDRedux===null){\n                                            if(snapshot.val().requestStatus!=='rejected'||snapshot.val().request!==this.props.emailRedux){\n                                                this.props.newMessageRoute(message.messageID)\n                                                loopIndex = -1 \n                                            }\n                                        }\n                                    }else{\n                                        loopIndex++\n                                    }\n                                }\n                                this.props.dispatch(addRequestCount(requestArray.length))\n                            }\n                        })\n                        this.props.dispatch(addAllCurrentUserEmails(allUserEmails))\n                        this.props.dispatch(addAllCurrentUserIDs(allUserIDs))\n                    }\n                    if(this.props.messagesRedux.length >=  messagesArray.length+requestArray.length){\n                        document.getElementById('scroll-here').scrollIntoView();\n                    }\n                    this.setState({\n                        messages: messagesArray,\n                    })\n                }\n            }   \n        })\n    } \n\n\n    test = () => {\n        console.log(Object.values(this.state.allInfo))\n    }\n\n    inboxToMessages = (messageID) => {\n        this.props.newMessageRoute(messageID)\n        const messageRef = firebase.database().ref(`messages/${messageID}`)\n        messageRef.on('value', (snapshot) => {\n            if(snapshot.val()){\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,8)\n                messageValues.reverse().splice(0,8)\n                messageValues.map((value,index) => {\n                    if(value.read===false){\n                        if(value.email!==this.props.emailRedux){\n                            const updateMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[index]}`)\n                            updateMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                        }\n                    }\n                    return null\n                })\n                document.getElementById('scroll-here').scrollIntoView();\n            }\n        })\n    }\n\n    inboxToMessagesAsync = (messageID) => {\n        const runFunction = async () => {\n            await this.props.dispatch(isMessageRequest(false))\n            await this.inboxToMessages(messageID)\n            await document.getElementById('scroll-here').scrollIntoView();\n        }\n        runFunction()\n    } \n\n    getMessageSummariesAsync = () => {\n        const runFunction = async () => {\n            await this.props.dispatch(addRequestCount(0))\n            await this.getMessageSummaries()\n        }\n        runFunction()\n    }\n\n\n    componentDidMount(){\n        this.getMessageSummariesAsync()\n    }\n    \n    render() {\n        return(\n            <div>\n                {Object.values(this.props.allInfoInbox).map((message, index)=> {\n                    // console.log('return', message)\n                    return(\n                        <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatIDRedux===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessagesAsync(this.state.messages[index])} key={index}>\n                            <ImageContainer>\n                                <ProfileImage alt=\"user profile\" src={message.photoURL}></ProfileImage>\n                            </ImageContainer>\n                            <MessageContainer>\n                                <InboxUser>{message.displayName}</InboxUser>\n                                <InboxMessage >{message.message}</InboxMessage>\n                            </MessageContainer>\n                            {message.unread > 0 ? \n                                <UndreadContainer>\n                                    <UnreadCircle></UnreadCircle>\n                                    <UnreadStyles>{message.unread}</UnreadStyles>\n                                </UndreadContainer>\n                            :\n                            null\n                            }\n                        </InboxContainer>\n                    )\n                    })\n                }\n                </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Inbox)","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport { \n    InboxMessage, \n    ProfileImage, \n    InboxContainer,  \n    ImageContainer,\n    MessageContainer,\n    InboxUser,\n} from \"../Styles/Inbox.styles\"\nimport { connect } from 'react-redux'\nimport { addAllCurrentUserEmails, addAllCurrentUserIDs } from '../Redux/actions/appActions'\nimport { isMessageRequest } from \"../Redux/actions/requestsActions\"\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    emailRedux: state.app.emailRedux,\n    isInboxTab: state.inbox.isInboxTab,\n})\n\nconst compareLastMessageTimestamp = (a, b) => {\n    let comparison = 0\n    if (a.lastMessage < b.lastMessage){\n        comparison = 1\n    } else if (a.lastMessage > b.lastMessage){\n        comparison = -1\n    } \n    return comparison\n}\n\nclass Inbox extends Component {\n\n    state = {\n        messages: [],\n        allInfo: [],\n    }\n\n    getMessageSummaries = () => {\n        const userID = firebase.auth().currentUser\n        const messagesRef = firebase.database().ref(`users/${userID.uid}`)\n        messagesRef.on('value', (snapshot)=> {\n            const messagesSnapshot = snapshot.val()\n            if(messagesSnapshot){\n                if(messagesSnapshot.messages){\n                    let messageInfo = Object.values(messagesSnapshot.messages)\n                    messageInfo = messageInfo.sort(compareLastMessageTimestamp)\n                    let messagesArray = []\n                    let allUserIDs = []\n                    let allUserEmails = []\n                    let finalInfoObject = {}\n                    for (let message of messageInfo){\n                        const messageSummary = firebase.database().ref(`messages/${message.messageID}`)\n                        let lastMessage \n                        messageSummary.on('value', (snapshot)=> {\n                            if(snapshot.val()){\n                                let infoObject = {}\n                                lastMessage = Object.values(snapshot.val())\n                                let unreadCount = 0\n                                const otherUserInfo = Object.values(snapshot.val())\n                                let otherUserDisplayName \n                                let otherUserPhotoURL\n                                if (otherUserInfo[otherUserInfo.length-3]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-6]\n                                } else if (otherUserInfo[otherUserInfo.length-6]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-3]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-1]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-4]\n                                } else if(otherUserInfo[otherUserInfo.length-4]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-1]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-2]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-5])\n                                } else if(otherUserInfo[otherUserInfo.length-5]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-2])\n                                }\n                                lastMessage = lastMessage[lastMessage.length-10]\n                                if(lastMessage){\n                                    lastMessage = Object.values(lastMessage)[1]\n                                    if(lastMessage.length+lastMessage.split(\" \").length > 31){\n                                        lastMessage = lastMessage.slice(0, 31)\n                                        lastMessage += \"...\"\n                                    }\n                                }\n                                allUserIDs.push(message.messageID)\n                                infoObject[\"message\"] = lastMessage\n                                infoObject[\"photoURL\"] = otherUserPhotoURL\n                                infoObject[\"displayName\"] = otherUserDisplayName\n                                infoObject[\"unread\"] = unreadCount\n                                if(snapshot.val().request===this.props.emailRedux&&snapshot.val().requestStatus==='pending'){\n                                    finalInfoObject[message.messageID] = infoObject\n                                    this.setState({\n                                        allInfo: finalInfoObject\n                                    })\n                                    messagesArray.push(message.messageID)\n                                }\n                            }\n                            document.getElementById('scroll-here').scrollIntoView();\n                        })\n                        this.props.dispatch(addAllCurrentUserEmails(allUserEmails))\n                        this.props.dispatch(addAllCurrentUserIDs(allUserIDs))\n                    }\n                    this.setState({\n                        messages: messagesArray,\n                    })\n                }\n            }\n                \n        })\n    } \n\n    test = () => {\n    }\n\n    inboxToMessagesAsync = (messageID) => {\n        const runFunction = async () => {\n            await this.props.dispatch(isMessageRequest(true))\n            await this.props.newMessageRoute(messageID)\n            await document.getElementById('scroll-here').scrollIntoView();\n        }\n        runFunction()\n    } \n\n    componentDidMount(){\n        this.getMessageSummaries()\n    }\n    \n    render() {\n        return(\n            <div>\n                {/* <button onClick={(this.test)}>push</button> */}\n                {this.state.messages.length > 0 \n                ?\n                <div>\n                    \n                    {this.props.isInboxTab ? \n                    <div>Hellooo</div>\n                    :\n                        Object.values(this.state.allInfo).map((message, index)=> {\n                            return(\n                                <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatIDRedux===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessagesAsync(this.state.messages[index])} key={index}>\n                                    <ImageContainer>\n                                        <ProfileImage alt=\"user profile\" src={message.photoURL}></ProfileImage>\n                                    </ImageContainer>\n                                    <MessageContainer>\n                                        <InboxUser>{message.displayName}</InboxUser>\n                                        <InboxMessage >{message.message}</InboxMessage>\n                                    </MessageContainer>\n                                </InboxContainer>\n                                )\n                        })\n                    \n                    }\n                </div>\n                :\n                null\n                }\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Inbox)","import styled from \"styled-components\"\n\nexport const InboxContainerStyle = styled.div`\nwidth: 30vw;\nheight: 86vh; \n`\n\nexport const TabsContainer = styled.div`\n    display: flex;\n    color: white;\n    justify-content: space-evenly;\n`\n\nexport const InboxTab = styled.div`\n    &:hover {\n        cursor: pointer\n    };\n    text-decoration: ${props=> (props.isSelected ? 'underline' : 'null')}\n`\n\nexport const RequestsTab = styled.div`\n    &:hover {\n        cursor: pointer;\n    };\n    text-decoration: ${props=> (props.isSelected ? 'null' : 'underline')}\n`","import React from \"react\"\nimport Inbox from \"./Inbox\"\nimport Requests from './Requests'\nimport { InboxContainerStyle } from \"../Styles/InboxContainer.styles\"\nimport Scroll from \"./Scroll\"\nimport { connect } from 'react-redux'\nimport { isInboxTab } from \"../Redux/actions/inboxActions\"\nimport { TabsContainer,\n    InboxTab,\n    RequestsTab, \n} from '../Styles/InboxContainer.styles'\n\nconst mapStateToProps = (state) => ({\n    isInboxTab: state.inbox.isInboxTab,\n    requestCount: state.requests.requestCount\n})\n\nconst InboxContainer = (props) => {\n    return(\n        <div>\n            <TabsContainer>\n                <InboxTab isSelected={props.isInboxTab} onClick={()=>props.dispatch(isInboxTab(true))}>Inbox</InboxTab>\n                <RequestsTab isSelected={props.isInboxTab} onClick={()=>props.dispatch(isInboxTab(false))}>Requests ({props.requestCount})</RequestsTab>\n            </TabsContainer>\n            {props.isInboxTab ? \n            <Scroll height=\"88vh\">\n                <InboxContainerStyle>\n                    <Inbox \n                    newMessageRoute={props.newMessageRoute}\n                    />\n                </InboxContainerStyle>\n            </Scroll>\n            :\n            <Scroll height=\"88vh\">\n                <InboxContainerStyle>\n                    <Requests \n                    newMessageRoute={props.newMessageRoute}\n                    />\n                </InboxContainerStyle>\n            </Scroll> \n            }\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps)(InboxContainer)","import styled from \"styled-components\"\n\nexport const NewMessageButton = styled.button`\n    height: 35px;\n    width: 3vw;\n    cursor: pointer;\n    background-color: rgb(50,50,50);\n    color: white;\n    border: none;\n`\n\nexport const NewMessageInput = styled.input`\n    height: 30px;\n    width: 200px;\n    cursor: pointer;\n    background-color: gray;\n    color: white;\n    border: none;\n    margin: 0 5px 0 10px;\n`\n\nexport const NewMessageContainer = styled.div`\n    color: white;\n`","import React, { Component } from \"react\"\n// import firebase from \"./firebase\"\nimport { NewMessageButton, NewMessageInput, NewMessageContainer } from \"../Styles/NewMessage.styles\"\nimport { connect } from 'react-redux'\nimport { addMessages } from '../Redux/actions/appActions'\nimport { addCurrentChatID, addNewMessageOtherUserEmail } from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n    allUserEmailsRedux: state.app.allUserEmailsRedux,\n    emailRedux: state.app.emailRedux,\n    allCurrentUserEmailsRedux: state.app.allCurrentUserEmailsRedux,\n    allCurrentUserIDsRedux: state.app.allCurrentUserIDsRedux,\n})\n\nclass NewMessage extends Component {\n\n    state = {\n        email: \"\",\n        isUserExist: \"\",\n    }\n\n    handleEmail = (e) => {\n        this.setState({\n            email: e.target.value\n        })\n    }\n\n    createNewMessage = () => {\n        if(this.state.email.length>0){\n            const emailIndex = this.props.allCurrentUserEmailsRedux.indexOf(this.state.email)\n            if(emailIndex!==-1){\n                this.props.getMessages(this.props.allCurrentUserIDsRedux[emailIndex])\n                this.props.dispatch(addCurrentChatID(this.props.allCurrentUserIDsRedux[emailIndex]))\n                if(this.state.isUserExist===\"user does not exist\"){\n                    this.setState({\n                        isUserExist: \"\",\n                    })\n                }\n            }else{\n                // if(this.props.allUserEmailsRedux){\n                    for(let email of this.props.allUserEmailsRedux) {\n                        if(this.state.email===this.props.emailRedux){\n                            break\n                        }else if(email===this.state.email){\n                            this.props.dispatch(addMessages([]))\n                            this.props.dispatch(addCurrentChatID('NEW MESSAGE'))\n                            this.props.dispatch(addNewMessageOtherUserEmail(this.state.email))\n                            this.setState({\n                                isUserExist: \"\"\n                            })\n                            break\n                        }else{\n                            this.setState({\n                                isUserExist: \"user does not exist\"\n                            })\n                        }\n                    }\n                // }\n            }\n            document.getElementById(\"email-input\").value=\"\"\n        }\n    }\n\n    render() {\n        return(\n            <NewMessageContainer>\n                {/* New Message */}\n                <NewMessageInput className=\"br2\" id=\"email-input\" onChange={this.handleEmail} placeholder=\"enter email\"></NewMessageInput>\n                <NewMessageButton className=\"br2\" onClick={this.createNewMessage}>+</NewMessageButton>\n                <div>{this.state.isUserExist}</div>\n            </NewMessageContainer>\n        )\n    }\n} \n\nexport default connect(mapStateToProps)(NewMessage) ","import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n    width: 100%;\n`\n\nexport const LogOutButton = styled.button`\n    border: none;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(80, 80, 80);\n    margin: 5px 5px 5px 10px;\n`\n\nexport const LogInButton = styled.button`\n    border: none;\n    height: 5vh;\n    width: 20vw;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(18, 208, 255);\n    position: absolute;\n    top: 55%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-family: 'Lato';\n    font-size: 2vw;\n    &:hover {\n        background-color: green;\n    }\n`\n\nexport const InboxMessageContainer = styled.div`\n    display: flex;\n`\n\nexport const AppTitle = styled.div`\n    font-size: 6vw;\n    color: white;\n    font-family: 'Lato';\n    position: absolute;\n    top: 45%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`\n\nexport const HomepageContainer = styled.div`\n`","import React, { Component } from 'react';\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport firebase, {auth, provider} from \"../firebase\"\nimport MessageContainer from \"./MessageContainer\"\nimport InboxContainer from \"./InboxContainer\"\nimport NewMessage from \"./NewMessage\"\nimport { AppContainer, \n  LogInButton, \n  InboxMessageContainer, \n  AppTitle,\n  LogOutButton,\n  HomepageContainer,\n} from \"../Styles/App.styles\"\nimport { connect } from 'react-redux'\nimport { \n  addUser,\n  addUserID,\n  addCurrentChatID,\n  addEmail,\n  addNewMessageOtherUserEmail,\n  addAllUserEmails,\n  addAllCurrentUserIDs,\n  addAllCurrentUserEmails,\n  addMessages,\n  preventScrollDown,\n  loadMessagesText,\n} from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n  messagesRedux: state.app.messagesRedux,\n  userRedux: state.app.userRedux,\n  currentChatIDRedux: state.app.currentChatIDRedux,\n  isMessageRequest: state.requests.isMessageRequest,\n  emailRedux: state.app.emailRedux,\n  quantityLoadMessages: state.app.quantityLoadMessages,\n  preventScrollDown: state.app.preventScrollDown,\n})\n\nclass App extends Component {\n  state = {\n    username: \"\",\n  }\n  \n  username = (e) => {\n    this.setState({\n      username: e.target.value\n    })\n  }\n  \n  stayLoggedIn = () => {\n    auth.onAuthStateChanged((user)=> {\n      if(user){\n        this.setState({\n          username: user.displayName,\n        })\n        this.props.dispatch(addEmail(user.email))\n        this.props.dispatch(addUserID(user.uid))\n        this.props.dispatch(addUser(user))\n        this.getUserInfo()\n      }\n    })\n  }\n\n  getUserInfo = () => {\n    const itemRef = firebase.database().ref(\"users\")\n    itemRef.on('value', (snapshot) => {\n      let users = snapshot.val()\n      let usersArray = []\n      for (let userId in users){\n        usersArray.push(users[userId].email)\n      }\n      this.props.dispatch(addAllUserEmails(usersArray))\n    })\n  }\n  \n  componentDidMount() {\n    this.stayLoggedIn()\n    // this.addUserData(\"Fiona\", \"fiona@orange.com\", \"https://lh3.googleusercontent.com/a-/AOh14GiEWMCD6XAm34qOIe9A3LcvcHcPToUSdOroPHcb\")\n  }\n\n  addUserData = (name, email, uid, photoURL) => {\n    const userData = {\n      name: name,\n      email: email,\n      dateCreated: Date.now(),\n      photoURL: photoURL,\n    }\n    firebase.database().ref(`users/${uid}`).set(userData)\n  }\n  \n  removeItem = (itemId) => {\n    const itemRef = firebase.database().ref(`/messages/${this.props.currentChatIDRedux}/${itemId}`)\n    itemRef.remove()\n  }\n  \n  logout = () => {\n    auth.signOut()\n    this.props.dispatch(addMessages([]))\n    this.props.dispatch(addAllCurrentUserIDs([]))\n    this.props.dispatch(addAllCurrentUserEmails([]))\n    this.props.dispatch(addAllUserEmails([]))\n    this.props.dispatch(addNewMessageOtherUserEmail(''))\n    this.props.dispatch(addEmail(''))\n    this.props.dispatch(addCurrentChatID(null))\n    this.props.dispatch(addUser(null))\n    this.props.dispatch(addUserID(''))\n  }\n\n  getMessages = (id) => {\n    const itemRef = firebase.database().ref(`messages/${id}`)\n    let limitMessages = itemRef.orderByKey().limitToLast(this.props.quantityLoadMessages)\n    limitMessages.on('value', (snapshot) => {\n      let items = snapshot.val()\n      let newState = []\n      if(items){\n        if(items['requestStatus']==='accepted'||items['request']!==this.props.emailRedux||(items['request']===this.props.emailRedux&&items['requestStatus']==='pending')){\n          for (let item in items) {\n            newState.push({\n              itemId: item,\n              user: items[item].user,\n              message: items[item].message,\n              email: items[item].email,\n              sent: items[item].sent,\n              read: items[item].read,\n              readTime: items[item].readTime,\n            })\n          }\n          if(this.props.messagesRedux){\n            console.log('messages',this.props.messagesRedux.length)\n            console.log('newstate',newState.length)\n            if(this.props.messagesRedux.length+14===Object.keys(newState).length){\n              this.props.dispatch(loadMessagesText('No more messages'))\n            }\n          }\n          if(this.props.currentChatIDRedux===snapshot.ref_.path.pieces_[1]||this.props.currentChatIDRedux===id){\n            this.props.dispatch(addMessages(newState))\n          }\n        }\n      }\n    })\n    if(!this.props.preventScrollDown){\n      document.getElementById('scroll-here').scrollIntoView()\n      this.props.dispatch(preventScrollDown(false))\n    }\n  }\n\n  login = () => {\n    auth.signInWithPopup(provider)\n    .then((result) => {\n      const user = result.user\n      this.setState({\n        user,\n        username: user.displayName\n      })\n      const userRef = firebase.database().ref(\"users\")\n      userRef.once('value', (snapshot)=>{\n        let users = snapshot.val()\n        let counter = 0\n        for (const userData in users){\n          if (users[userData].email===user.email){\n            counter++\n          }\n        }\n        if(counter===0){\n          this.addUserData(user.displayName, user.email, user.uid, user.photoURL)\n        }\n      })\n      this.getUserInfo()\n    })\n  }\n\n  newMessageRoute = (input) => {\n    const route = async () => {\n      await this.props.dispatch(addCurrentChatID(input))\n      await this.getMessages(input)\n    }\n    route()\n  }\n\n  test = () => {\n    console.log(this.state.allUserEmails)\n  }\n\n  render(){\n    return (\n      <AppContainer>\n        {/* <button onClick={this.getMessages}>get</button> */}\n        {this.props.userRedux ?\n          <LogOutButton className=\"br1 br3 pa2 ma1 dib\" onClick={this.logout}>\n            Log Out | {this.state.username}\n          </LogOutButton>             \n          :\n          <HomepageContainer>\n            <AppTitle>Messaging App</AppTitle>\n            <LogInButton onClick={this.login}>LOG IN</LogInButton>              \n          </HomepageContainer>\n        }\n        {this.props.userRedux ? \n        <div>\n          <NewMessage \n          getMessages={this.getMessages}\n          newMessageRoute={this.newMessageRoute}\n          />\n          <InboxMessageContainer>\n            <InboxContainer \n            newMessageRoute={this.newMessageRoute}\n            />\n            <MessageContainer \n            newMessageRoute={this.newMessageRoute}\n            getMessages={this.getMessages}\n            usernameFunc={this.username}\n            usernameState={this.state.username}\n            removeItem={this.removeItem}\n            />\n          </InboxMessageContainer>\n        </div>\n        :\n        null\n        }\n      </AppContainer>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\"\n\nexport const IndexContainer = styled.div`\n    // background-color: rgb(28,28,28);\n    background-color: rgb(18,18,23)\n    color: white;\n`","import * as actions from '../actions/appActions'\n\nexport const initialState = {\n    userRedux: '',\n    userIDRedux: '',\n    currentChatIDRedux: null,\n    emailRedux: '',\n    newMessageOtherUserEmailRedux: '',\n    allUserEmailsRedux: [],\n    allCurrentUserEmailsRedux: [],\n    allCurrentUserIDsRedux: [],\n    messagesRedux: [],\n    quantityLoadMessages: 24,\n    preventScrollDown: false,\n    loadMessagesText: 'Load more messages'\n}\n\nexport default function appReducer(state=initialState, action) {\n    switch(action.type){\n        case actions.LOAD_MESSAGES_TEXT:\n            return{...state, loadMessagesText: action.payload}\n        case actions.PREVENT_SCROLL_DOWN:\n            return{...state, preventScrollDown: action.payload}\n        case actions.ADD_QUANTITY_LOAD_MESSAGES:\n            return{...state, quantityLoadMessages: state.quantityLoadMessages + action.payload}\n        case actions.ADD_MESSAGES:\n            return {...state, messagesRedux: action.payload}\n        case actions.ADD_ALL_CURRENT_USER_IDS:\n            return {...state, allCurrentUserIDsRedux: action.payload}\n        case actions.ADD_ALL_CURRENT_USER_EMAILS:\n            return{...state, allCurrentUserEmailsRedux: action.payload}\n        case actions.ADD_ALL_USER_EMAILS:\n            return {...state, allUserEmailsRedux: action.payload}\n        case actions.ADD_NEW_MESSAGE_OTHER_USER_EMAIL:\n            return {...state, newMessageOtherUserEmailRedux: action.payload}\n        case actions.ADD_EMAIL:\n            return {...state, emailRedux: action.payload}\n        case actions.ADD_CURRENT_CHAT_ID:\n            return {...state, currentChatIDRedux: action.payload}\n        case actions.ADD_USER:\n            return {...state, userRedux: action.payload}\n        case actions.ADD_USERID:\n            return{...state, userID: action.payload}\n        default:\n            return state\n    }\n}","import * as actions from '../actions/inboxActions'\n\nconst initialState = {\n    isInboxTab: true,\n    allInfoInbox: []\n}\n\nexport default function inboxReducer(state=initialState, action){\n    switch(action.type){\n        case actions.IS_INBOX_TAB:\n            return {...state, isInboxTab: action.payload}\n        case actions.ADD_ALL_INFO_INBOX:\n            return{...state, allInfoInbox: action.payload}\n        default:\n            return state\n    }\n}\n","export const ADD_INBOX_MESSAGES = \"ADD_INBOX_MESSAGES\"\nexport const ADD_ALL_INFO = 'ADD_ALL_INFO'\n\nexport const addInboxMessages = (messages) => {\n    return (dispatch) => {\n        dispatch({type: ADD_INBOX_MESSAGES, payload: messages})\n    }\n}\n\nexport const addAllInfo = (allInfo) => {\n    return(dispatch)=> {\n        dispatch({type: ADD_ALL_INFO, payload: allInfo})\n    }\n}","import * as actions from '../actions/inboxContainerActions'\n\nexport const initialState = {\n    messagesInboxRedux: [],\n    allInfoRedux: [],\n}\n\nexport default function inboxContainerReducer(state=initialState, action) {\n    switch (action.type){\n        case actions.ADD_INBOX_MESSAGES:\n            return {...state, messagesInboxRedux: action.payload}\n        case actions.ADD_ALL_INFO:\n            return {...state, allInfoRedux: action.payload}\n        default:\n            return state\n    }\n}\n","import * as actions from '../actions/requestsActions'\n\nexport const initialState = {\n    requestCount: 0,\n    isMessageRequest: false,\n}\n\nexport default function requestsReducer(state=initialState, action) {\n    switch(action.type) {\n        case actions.ADD_REQUEST_COUNT:\n            return {...state, requestCount: action.payload}\n        case actions.IS_MESSAGE_REQUEST:\n            return {...state, isMessageRequest: action.payload}\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport appReducer from './appReducer'\nimport inboxReducer from './inboxReducer'\nimport inboxContainerReducer from './inboxContainerReducer'\nimport requestsReducer from './requestsReducer'\n\nconst rootReducer = combineReducers ({\n    app: appReducer,\n    inbox: inboxReducer,\n    inboxContainer: inboxContainerReducer,\n    requests: requestsReducer,\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { IndexContainer } from \"./Styles/Index.styles\"\nimport 'tachyons';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\"\nimport rootReducer from './Redux/reducers/rootReducer'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <IndexContainer>\n        <App />\n      </IndexContainer>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}