{"version":3,"sources":["9.png","Styles/InboxChatButton.styles.js","Components/InboxChatButtons.js","firebase.js","Styles/MessageInput.styles.js","Redux/actions/appActions.js","Redux/actions/inboxActions.js","Components/MessageInput.js","Styles/Messages.styles.js","Components/Messages.js","Styles/Scroll.styles.js","Components/Scroll.js","Styles/MessageContainer.styles.js","Redux/actions/requestsActions.js","Styles/RequestButtons.styles.js","Components/RequestButtons.js","Spinner/Spinner.styles.js","Components/MessageContainer.js","Spinner/Spinner.js","UnreadCircle.svg","Styles/Inbox.styles.js","Components/Inbox.js","Components/Requests.js","Styles/InboxContainer.styles.js","Components/InboxContainer.js","Styles/NewMessage.styles.js","Components/NewMessage.js","Styles/App.styles.js","Styles/ErrorBoundary.styles.js","Components/ErrorBoundary.js","Components/App.js","serviceWorker.js","Styles/Index.styles.js","Redux/reducers/appReducer.js","Redux/reducers/inboxReducer.js","Redux/actions/inboxContainerActions.js","Redux/reducers/inboxContainerReducer.js","Redux/reducers/requestsReducer.js","Redux/reducers/rootReducer.js","index.js"],"names":["module","exports","Button","styled","div","props","isChatState","ButtonContainer","InboxChatButtons","onClick","isChat","provider","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","GoogleAuthProvider","MessageInputContainer","MessageInputArea","textarea","MessageInputButton","isMessagesLoading","isLoadingBoolean","dispatch","type","payload","loadMessagesText","text","preventScrollDown","boolean","addQuantityLoadMessages","quantity","addMessages","messages","addAllCurrentUserIDs","allCurrentUserIDs","addAllCurrentUserEmails","allCurrentUserEmails","addAllUserEmails","allUserEmails","addNewMessageOtherUserEmail","otherUserEmail","addEmail","email","addCurrentChatID","currentChatID","addUser","user","addUserID","userID","isLoop","isLoopBoolean","isInboxTab","inboxTabBool","addAllInfoInbox","info","MessageInput","state","message","submitFunction","messageRef","messageID","otherUserID","otherUserDisplayName","otherUserPhotoURL","database","ref","once","snapshot","userIndex","allUserEmailsRedux","indexOf","newMessageOtherUserEmailRedux","userInfoArray","Object","keys","val","name","photoURL","addMessageID","addMessageIDToOtherUser","messagesRedux","length","itemRef","messageInfo","lastMessage","Date","now","user1Photo","user2Photo","userRedux","user1Email","user2Email","user1","user2","displayName","request","requestStatus","messageCount","push","then","collectionRef","path","pieces_","pop","addNewTime","setTimeout","update","usernameState","read","emailRedux","sent","document","getElementById","value","setState","getMessages","test","currentChatIDRedux","messageRefValues","values","scrollIntoView","quantityLoadMessages","userMessageIDs","id","lastUpdated","submitFunctionAsync","a","runFunction","submit","e","keyCode","shiftKey","clearUnread","preventDefault","submitClick","handleMessageChange","target","messageKeys","messageValues","reverse","splice","valueIndex","readTime","className","onChange","this","placeholder","addEventListener","Component","connect","app","MessageOptionsContainer","isCurrentUser","UserMessageStyle","NewMessageHeader","MessagesContainer","Delete","button","Options","showOptions","Seen","Timestamp","ShowHideMessages","show","hide","onMouseLeave","userMessage","itemID","index","messagesQuantity","moment","unix","calendar","toLowerCase","removeItem","Number","Messages","itemId","remove","messageCountRef","map","key","isMesssagesLoading","ScrollStyles","heightValue","Scroll","height","children","MessageContainerStyles","LoadContainer","LoadMore","addRequestCount","requestCount","isMessageRequest","isRequestBool","RequestButtonsContainer","DeleteButton","AcceptButton","RequestButtons","accept","input","SpinnerOverlay","SpinnerContainer","MessagesSpinner","WrappedComponent","isLoading","otherProps","WithSpinner","MessageContainer","loadMoreMessages","newMessageRoute","usernameFunc","username","requests","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","cx","cy","r","fill","_ref","svgRef","title","width","ForwardRef","forwardRef","InboxContainer","isCurrentThread","ImageContainer","ProfileImage","img","InboxUser","InboxMessage","UndreadContainer","UnreadStyles","UnreadCircle","compareLastMessageTimestamp","b","comparison","Inbox","allInfo","getMessageSummaries","currentUser","uid","on","messagesSnapshot","sort","messagesArray","requestArray","allUserIDs","finalInfoObject","continueLoop","messageSummary","infoObject","unreadMessages","unreadCount","unreadMessage","otherUserInfo","split","slice","console","log","inboxToMessages","inboxToMessagesAsync","allInfoInbox","alt","src","unread","inbox","InboxContainerStyle","TabsContainer","InboxTab","isSelected","RequestsTab","Requests","NewMessageButton","NewMessageInput","NewMessageContainer","NewMessage","isUserExist","handleEmail","createNewMessage","emailIndex","allCurrentUserEmailsRedux","allCurrentUserIDsRedux","MobileContainer","ChatButtonsMobile","AppContainer","LogOutButton","LogInButton","InboxMessageContainer","AppTitle","HomepageContainer","InboxMobile","ErrorContainer","Image404","TextContainer","ErrorText","ErrorBoundary","hasError","error","photo404","App","showLogInButton","stayLoggedIn","onAuthStateChanged","getUserInfo","users","usersArray","userId","addUserDataTemp","userData","dateCreated","addUserData","set","logout","signOut","orderByKey","limitToLast","items","newState","item","ref_","login","signInWithPopup","result","counter","scrollDown","route","bool","Boolean","window","location","hostname","match","IndexContainer","initialState","userIDRedux","messagesInboxRedux","allInfoRedux","rootReducer","combineReducers","action","inboxContainer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.bb864511.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/9.fc515869.png\";","import styled from 'styled-components'\n\nexport const Button = styled.div`\n    color: white;\n    padding-right: 20px;\n    &:hover{\n        cursor: pointer\n    }\n    text-decoration: ${props=>(props.isChatState ? 'underline' : 'none')}\n`\n\nexport const ButtonContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    &:hover{\n        cursor: pointer\n    }\n`","import React from 'react' \nimport { Button, ButtonContainer } from '../Styles/InboxChatButton.styles'\n\nconst InboxChatButtons = (props) => {\n    return(\n        <ButtonContainer>\n            <Button isChatState={!props.isChatState} onClick={()=>props.isChat(false)}>\n                Inbox\n            </Button>\n            <Button isChatState={props.isChatState} onClick={()=>props.isChat(true)}>\n                Chat\n            </Button>\n        </ButtonContainer>\n    )\n}\n\nexport default InboxChatButtons","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport 'firebase/database'\n\nconst config = {\n    apiKey: \"AIzaSyDVflBKJPhm5bNZfYL5yoqT66NfyiPQgT0\",\n    authDomain: \"messages-598f6.firebaseapp.com\",\n    databaseURL: \"https://messages-598f6.firebaseio.com\",\n    projectId: \"messages-598f6\",\n    storageBucket: \"messages-598f6.appspot.com\",\n    messagingSenderId: \"1044285096751\",\n    appId: \"1:1044285096751:web:f00b017ec43ce7dd2557da\",\n    measurementId: \"G-KRSD66CD2T\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(config)\nconst db = firebaseApp.firestore()\n\nexport { db }\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\n\nexport default firebase","import styled from 'styled-components'\n\nexport const MessageInputContainer = styled.div`\n    margin-top: 10px;\n    display: flex;\n    width: 100%;\n`\n \nexport const MessageInputArea = styled.textarea`\n    height: 40px;\n    width: 93%;\n    background-color: grey;\n    border: none;\n    color: white;\n`\n \nexport const MessageInputButton = styled.div`\n    border: solid 1px rgb(50,50,50);\n    background-color: rgb(50,50,50);\n    color: white;\n    &:hover {\n        cursor: pointer\n    }\n`","export const ADD_USER = \"ADD_USER\"\nexport const ADD_USERID = \"ADD_USERID\"\nexport const ADD_CURRENT_CHAT_ID = \"ADD_CURRENT_CHAT_ID\"\nexport const ADD_EMAIL = \"ADD_EMAIL\"\nexport const ADD_NEW_MESSAGE_OTHER_USER_EMAIL = 'ADD_NEW_MESSAGE_OTHER_USER_EMAIL'\nexport const ADD_ALL_USER_EMAILS = 'ADD_ALL_USER_EMAILS'\nexport const ADD_ALL_CURRENT_USER_EMAILS = 'ADD_ALL_CURRENT_USER_EMAILS'\nexport const ADD_ALL_CURRENT_USER_IDS = 'ADD_ALL_CURRENT_USER_IDS'\nexport const ADD_MESSAGES = 'ADD_MESSAGES'\nexport const ADD_QUANTITY_LOAD_MESSAGES = 'ADD_QUANTITY_LOAD_MESSAGES'\nexport const PREVENT_SCROLL_DOWN = 'PREVENT_SCROLL_DOWN'\nexport const LOAD_MESSAGES_TEXT = 'LOAD_MESSAGES_TEXT'\nexport const IS_MESSAGES_LOADING = 'IS_MESSAGES_LOADING'\n\nexport const isMessagesLoading = (isLoadingBoolean) => {\n    return(dispatch) => {\n        dispatch({type: IS_MESSAGES_LOADING, payload: isLoadingBoolean})\n    }\n}\n\nexport const loadMessagesText = (text) => {\n    return(dispatch)=> {\n        dispatch({type: LOAD_MESSAGES_TEXT, payload: text})\n    }\n}\n\nexport const preventScrollDown = (boolean) => {\n    return(dispatch)=> {\n        dispatch({type:PREVENT_SCROLL_DOWN, payload: boolean})\n    } \n}\n\nexport const addQuantityLoadMessages = (quantity) => {\n    return(dispatch) => {\n        dispatch({type: ADD_QUANTITY_LOAD_MESSAGES, payload: quantity})\n    }\n}\n\nexport const addMessages = (messages) => {\n    return (dispatch) => {\n        dispatch({type: ADD_MESSAGES, payload: messages})\n    }\n}\n\nexport const addAllCurrentUserIDs = (allCurrentUserIDs) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_CURRENT_USER_IDS, payload: allCurrentUserIDs})\n    }\n}\n\nexport const addAllCurrentUserEmails = (allCurrentUserEmails) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_CURRENT_USER_EMAILS, payload: allCurrentUserEmails})\n    }\n}\n\nexport const addAllUserEmails = (allUserEmails) => {\n    return(dispatch) => {\n        dispatch({type: ADD_ALL_USER_EMAILS, payload: allUserEmails})\n    }\n}\n\nexport const addNewMessageOtherUserEmail = (otherUserEmail) => {\n    return(dispatch) => {\n        dispatch({type: ADD_NEW_MESSAGE_OTHER_USER_EMAIL, payload: otherUserEmail})\n    }\n}\n\nexport const addEmail = (email) => {\n    return(dispatch) => {\n        dispatch({type: ADD_EMAIL, payload: email})\n    }\n}\n\nexport const addCurrentChatID = (currentChatID) => {\n    return(dispatch) => {\n        dispatch({type: ADD_CURRENT_CHAT_ID, payload: currentChatID})\n    }\n}\n\nexport const addUser = (user) => {\n    return(dispatch) => {\n        dispatch({ type: ADD_USER, payload: user })\n    }\n}\n\nexport const addUserID = (userID) => {\n    return(dispatch)=>{\n        dispatch({type: ADD_USERID, payload: userID})\n    }\n}","export const IS_INBOX_TAB = \"IS_INBOX_TAB\"\nexport const ADD_ALL_INFO_INBOX = 'ADD_ALL_INFO_INBOX'\nexport const IS_LOOP = 'IS_LOOP'\n\nexport const isLoop = (isLoopBoolean) => {\n    return(dispatch) => {\n        dispatch({type: IS_LOOP, payload: isLoopBoolean})\n    }\n}\n\nexport const isInboxTab = (inboxTabBool) => {\n    return(dispatch) => {\n        dispatch({type: IS_INBOX_TAB, payload: inboxTabBool})\n    }\n}\n\nexport const addAllInfoInbox = (info) => {\n    return(dispatch) => {\n        dispatch({type:ADD_ALL_INFO_INBOX, payload: info})\n    }\n}","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport { MessageInputContainer, \n    MessageInputArea, \n    MessageInputButton, \n} from '../Styles/MessageInput.styles'\nimport { connect } from 'react-redux'\nimport { addCurrentChatID, addQuantityLoadMessages } from '../Redux/actions/appActions'\nimport { isInboxTab } from '../Redux/actions/inboxActions'\n\nconst mapStateToProps = (state) => ({\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n    allUserEmailsRedux: state.app.allUserEmailsRedux,\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    newMessageOtherUserEmailRedux: state.app.newMessageOtherUserEmailRedux,\n    userID: state.app.userID,\n    userRedux: state.app.userRedux,\n    quantityLoadMessages: state.app.quantityLoadMessages\n})\n \nclass MessageInput extends Component {\n\n    state = {\n        message: ''\n    }\n\n    submitFunction = () => {\n        let messageRef\n        let messageID\n        let otherUserID\n        let otherUserDisplayName\n        let otherUserPhotoURL\n        let otherUserEmail\n        const userIdRef = firebase.database().ref('users')\n        userIdRef.once('value', (snapshot)=> {\n            const userIndex = this.props.allUserEmailsRedux.indexOf(this.props.newMessageOtherUserEmailRedux)\n            const userInfoArray = Object.keys(snapshot.val())\n            otherUserID = userInfoArray[userIndex]\n            if(userIndex!==-1){\n                otherUserDisplayName = snapshot.val()[otherUserID].name\n                otherUserPhotoURL = snapshot.val()[otherUserID].photoURL\n                otherUserEmail = snapshot.val()[otherUserID].email\n            }\n        })\n        const addMessageID = firebase.database().ref(`users/${this.props.userID}/messages`)\n        let addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n        if(this.props.messagesRedux.length===0){\n            const itemRef = firebase.database().ref(\"messages\")\n            const messageInfo = {\n                lastMessage: Date.now(),\n                user1Photo: otherUserPhotoURL,\n                user2Photo: this.props.userRedux.photoURL,\n                user1Email: otherUserEmail,\n                user2Email: this.props.userRedux.email,\n                user1: otherUserDisplayName,\n                user2: this.props.userRedux.displayName,\n                request: otherUserEmail,\n                requestStatus: 'pending',\n                messageCount: 1,\n            }\n            itemRef.push(messageInfo)\n            .then(collectionRef => {\n                messageID = collectionRef.path.pieces_.pop()\n                \n                addMessageID.push({\n                    messageID: messageID,\n                    // lastMessage: Date.now(),\n                }).then(collectionRef => {\n                    const addNewTime = firebase.database().ref(`users/${this.props.userID}/messages/${collectionRef.path.pieces_.pop()}`)\n                    // const addNewTime = firebase.database().ref(`users/${this.props.userID}/messages/${messageID = collectionRef.path.pieces_.pop()}`)\n                    setTimeout(()=> addNewTime.update({\n                        lastMessage: Date.now(),\n                    }), 17)\n                })\n                \n                addMessageIDToOtherUser.push({\n                    messageID: messageID,\n                    lastMessage: Date.now(),\n                })\n                \n                this.props.dispatch(addCurrentChatID(messageID))\n                messageRef = firebase.database().ref(`messages/${messageID}`)\n                messageRef.update({\n                    lastMessage: Date.now()\n                })\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.emailRedux,\n                    sent: Date.now(),\n                }\n                messageRef.push(message)\n                document.getElementById(\"messageInput\").value=\"\"\n                this.setState({\n                    message: ''\n                })\n                this.props.getMessages(messageID)\n                this.props.dispatch(isInboxTab(true))  \n            })\n        }else{\n            const noEmptyMessage = /^(?!\\s*$).+/\n            if(noEmptyMessage.test(this.state.message)){\n                messageRef = firebase.database().ref(`messages/${this.props.currentChatIDRedux}`)\n                messageRef.once('value', (snapshot)=> {\n                    let messageRefValues = Object.values(snapshot.val())\n                    if(this.props.emailRedux!==messageRefValues[messageRefValues.length-2]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-2]\n                    }else if (this.props.emailRedux!==messageRefValues[messageRefValues.length-5]){\n                        otherUserEmail = messageRefValues[messageRefValues.length-5]\n                    }\n                    messageRef.update({\n                        lastMessage: Date.now(),\n                        messageCount: messageRefValues[messageRefValues.length-9] + 1\n                    })\n                    if (document.getElementById('scroll-here')){\n                        document.getElementById('scroll-here').scrollIntoView()\n                    }\n                })\n                this.props.dispatch(addQuantityLoadMessages(this.props.quantityLoadMessages + 1))\n                const message = {\n                    user: this.props.usernameState,\n                    message: this.state.message,\n                    read: false, \n                    email: this.props.emailRedux,\n                    sent: Date.now(),\n                }\n                messageRef.push(message)\n                const messageRefTest = firebase.database().ref('users')\n                messageRefTest.once('value', (snapshot)=> {\n                    for (let userID in snapshot.val()){\n                        if(snapshot.val()[userID].email===otherUserEmail){\n                            otherUserID = userID\n                        }\n                    }\n                })\n                addMessageID.once('value', (snapshot)=> {\n                    const userMessageIDs = snapshot.val()\n                    for (let id in userMessageIDs){\n                        if (userMessageIDs[id].messageID  === this.props.currentChatIDRedux){\n                            const idTimestampRef = firebase.database().ref(`users/${this.props.userID}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                addMessageIDToOtherUser = firebase.database().ref(`users/${otherUserID}/messages`) \n                addMessageIDToOtherUser.once('value', (snapshot)=> {\n                    for (let id in snapshot.val()){\n                        if (snapshot.val()[id].messageID  === this.props.currentChatIDRedux){\n                            const idTimestampRef = firebase.database().ref(`users/${otherUserID}/messages/${id}`)\n                            idTimestampRef.update({\n                                lastMessage: Date.now()\n                            })\n                        }\n                    }\n                })\n                const lastUpdatedRef = firebase.database().ref(`users/${this.props.userID}`)\n                lastUpdatedRef.update({\n                    lastUpdated: Date.now()\n                })\n                this.setState({\n                    message: ''\n                })\n                document.getElementById(\"messageInput\").value=\"\"\n                this.props.getMessages(this.props.currentChatIDRedux)\n            }\n        }\n    }\n\n    submitFunctionAsync = () => {\n        const runFunction = async () => {\n            await this.submitFunction()\n            // await this.props.getMessages(this.props.currentChatIDRedux)\n        }\n        runFunction()\n    }\n\n    submit = (e) => {\n        if(this.state.message.length>0){\n            if (e.keyCode){\n                if (e.keyCode===13 && !e.shiftKey){\n                    this.clearUnread(this.props.currentChatIDRedux)\n                    e.preventDefault()\n                    this.submitFunction()\n                }\n            }else{\n                e.preventDefault()\n                this.clearUnread(this.props.currentChatIDRedux)\n                this.submitFunction()\n                if (document.getElementById('scroll-here')){\n                    document.getElementById('scroll-here').scrollIntoView()\n                }\n            }\n        }\n        document.getElementById(\"messageInput\").value=\"\"\n    }\n\n    submitClick = () => {\n        if(this.state.message.length>0){\n            this.preventDefault()\n            this.clearUnread(this.props.currentChatIDRedux)\n            this.submitFunction()\n            if (document.getElementById('scroll-here')){\n                document.getElementById('scroll-here').scrollIntoView()\n            }\n            document.getElementById(\"messageInput\").value=\"\"\n        }\n    }\n\n    handleMessageChange = (e) => {\n        this.setState({\n          message: e.target.value\n        })\n    }\n\n    clearUnread = (messageID) => {\n        if(this.props.messagesRedux.length>0){\n            const messageRef = firebase.database().ref(`messages/${messageID}`)\n            messageRef.once('value', (snapshot) => {\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,10)\n                messageValues.reverse().splice(0,10)\n                let valueIndex = 0\n                for (let value of messageValues) {\n                    if(value.read===false){\n                        if(value.email !== this.props.emailRedux){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[valueIndex]}`)\n                            firebaseMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                            valueIndex++\n                        }\n                    }else{\n                        break\n                    }\n                }\n            })\n        }\n    }\n\n    render(){\n        return(\n            <MessageInputContainer>\n                <MessageInputArea className=\"br3\" onClick={()=>this.clearUnread(this.props.currentChatIDRedux)} id=\"messageInput\" onChange={this.handleMessageChange} placeholder=\"enter message\"></MessageInputArea>\n                <MessageInputButton onClick={this.submitClick}>Send</MessageInputButton>\n            </MessageInputContainer>\n        ) \n    }\n    componentDidMount(){\n        document.addEventListener(\"keydown\", this.submit)\n    }\n}\n\nexport default connect(mapStateToProps)(MessageInput)\n","import styled from \"styled-components\"\n\nexport const MessageOptionsContainer = styled.div`\n    display: flex;\n    flex-direction: ${props => (props.isCurrentUser ? \"row-reverse\" : \"row\")};\n    align-items: center;\n`\n\nexport const UserMessageStyle = styled.div`\n    color: white;\n    background-color: ${props => (props.isCurrentUser ? \"rgb(45, 45, 45)\" : \"rgb(80, 80, 80)\")};\n    border: rgb(20,20,20) solid 1px;\n    max-width: 45%;\n    min-width: 15%;\n    word-wrap:break-word;\n    &:hover {\n        cursor: pointer\n    }\n`\n\nexport const NewMessageHeader = styled.div`\n    color: white;\n`\n\nexport const MessagesContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n\nexport const Delete = styled.button`\n    color: white;\n    border: none;\n    background-color: rgb(45, 45, 45);\n    &:hover {\n        cursor:pointer\n    }\n`\n\nexport const Options = styled.div`\n    margin-top: 1rem;\n    background: rgb(70,70,70);\n    visibility: ${props=> (props.showOptions ?  'null': 'hidden')};\n`\n\nexport const Seen = styled.div`\n    font-size: 10px;\n`\n\nexport const Timestamp = styled.div`\n    color: rgb(220,220,220);\n`","import React, { Component } from \"react\"\nimport { UserMessageStyle,\n    NewMessageHeader, \n    MessagesContainer, \n    Options, \n    MessageOptionsContainer,\n    Delete,\n    Seen,\n    Timestamp,\n} from  \"../Styles/Messages.styles\"\nimport { connect } from 'react-redux'\nimport firebase from '../firebase'\nimport moment from 'moment'\n\nconst mapStateToProps = (state) => ({\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    newMessageOtherUserEmailRedux: state.app.newMessageOtherUserEmailRedux,\n    isMesssagesLoading: state.app.isMesssagesLoading,\n    quantityLoadMessages: state.app.quantityLoadMessages,\n})\n\nclass ShowHideMessages extends Component {\n    state = {\n        showOptions: false,\n    }\n\n    show = () => {\n        if(this.state.showOptions){\n            this.setState({\n                showOptions: false\n            })\n        }else{\n            this.setState({\n                showOptions: true\n            })\n        }\n    }\n\n    hide = () => {\n        this.setState({\n            showOptions: false\n        })\n    }\n\n    render() {\n        return(\n            this.props.message ? \n            <MessageOptionsContainer onMouseLeave={this.hide} isCurrentUser={this.props.emailRedux===this.props.email ? true : false}>\n                <UserMessageStyle isCurrentUser={this.props.emailRedux===this.props.email ? true : false} onClick={this.show} className={this.props.user===this.props.userMessage ? \"current-user grow br3 pa3 ma1 dib bw2 shadow-5\" : \"other-user grow br3 pa3 ma2 dib bw2 shadow-5\"}>\n                    {this.props.itemID!==\"lastMessage\"&&this.props.itemID!==\"user1\"&&this.props.itemID!==\"user2\"&&this.props.itemID!==\"user2Photo\"&&this.props.itemID!==\"user1Photo\"&&this.props.itemID!==\"user2Email\"&&this.props.itemID!==\"user1Email\" ? \n                    <div>\n                        {this.props.message}\n                        {(this.props.index===this.props.messagesQuantity-11)&&(this.props.readTime>0)&&(this.props.email===this.props.emailRedux) ? \n                        <Seen>Seen {moment.unix(this.props.readTime/1000).calendar().toLowerCase()}</Seen>\n                        :\n                        null\n                        }\n                    </div>\n                    : \n                    null\n                    }\n                </UserMessageStyle>\n                <Options isCurrentUser={this.props.emailRedux===this.props.email ? true : false} className='br3 pa2 ma1 dib shadow-5' showOptions={this.state.showOptions}>\n                    {this.props.emailRedux===this.props.email ? \n                    <Delete onClick={()=>this.props.removeItem(this.props.itemID)}>Delete</Delete>\n                    :\n                    null\n                    }\n                    <Timestamp>{moment.unix(Number(this.props.sent)/1000).calendar()}</Timestamp>\n                </Options>\n            </MessageOptionsContainer>\n            : \n            null\n        )\n    }\n}\n\nclass Messages extends Component {\n\n    removeItem = (itemId) => {\n        const itemRef = firebase.database().ref(`/messages/${this.props.currentChatIDRedux}/${itemId}`)\n        itemRef.remove()\n        const messageCountRef = firebase.database().ref(`messages/${this.props.currentChatIDRedux}`)\n        messageCountRef.once('value', (snapshot) => {\n            let messageCount = snapshot.val().messageCount\n            messageCountRef.update({\n                messageCount: messageCount - 1\n            })\n        })\n    }\n\n    render() {\n        return(\n            <MessagesContainer>\n                {/* <button onClick={()=>console.log(props.messagesRedux)}>push</button> */}\n                {this.props.currentChatIDRedux===\"NEW MESSAGE\" ? \n                    <NewMessageHeader>\n                        Send new message to: {this.props.newMessageOtherUserEmailRedux}\n                    </NewMessageHeader>\n                    :\n                    null\n                }\n                \n                {this.props.messagesRedux.map((message, index)=> {\n                    return(\n                        <ShowHideMessages\n                        messagesQuantity={this.props.messagesRedux.length}\n                        index={index}\n                        readTime={message.readTime}\n                        emailRedux={this.props.emailRedux}\n                        removeItem={this.removeItem}\n                        key={index}\n                        message={message.message}\n                        email={message.email}\n                        userMessage={message.user}\n                        itemID={message.itemId}\n                        sent={message.sent}\n                        />\n                    )\n                })\n                }\n            </MessagesContainer>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Messages)","import styled from 'styled-components'\n\nexport const ScrollStyles = styled.div`\n    overflow: scroll;\n    \n    @media (max-width: 900px) {\n        height: ${props=> (props.heightValue ? 'calc(100vh - 298px)' : 'calc(100vh - 100px)')};\n    }\n    @media (min-width: 900px) {\n        height: ${props=> (props.heightValue ? 'calc(102vh - 230px)' : 'calc(96vh - 140px)')};\n    }\n    @media (max-height: 500px) {\n        height: ${props=> (props.heightValue ? 'calc(102vh - 320px)' : 'calc(100vh - 170px)')};\n    }\n`","import React from \"react\"\nimport { ScrollStyles } from '../Styles/Scroll.styles'\n\nconst Scroll = (props) => {\n    return(\n        // <div style={{overflow: \"scroll\", border: \"5px black\", height: props.height, display:props.display, flexDirection:props.flexDirection}}>\n        //     {props.children}\n        // </div>\n        <ScrollStyles heightValue={props.height}>\n            {props.children}\n        </ScrollStyles>\n    )\n}\n\nexport default Scroll","import styled from \"styled-components\"\n\nexport const MessageContainerStyles = styled.div`\n    @media (max-width: 900px){\n        width: 100vw;\n        height: calc(98vh - 270px);\n    }\n    @media (min-width: 900px){\n        width: 55vw;\n        height: calc(100vh - 200px);\n    }\n    @media (min-width: 1100px){\n        width: 700px;\n        height: calc(100vh - 200px);\n    }\n    @media (max-height: 500px){\n        height: calc(100vh - 200px);\n    }\n    border: 5px solid rgb(30,30,30);\n` \n\nexport const LoadContainer = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nexport const LoadMore = styled.button`\n    color: white;\n    background-color: rgb(40,40,40);\n    border: none;\n    &:hover {\n        cursor: pointer\n    }\n`","export const ADD_REQUEST_COUNT = 'ADD_REQUEST_COUNT'\nexport const IS_MESSAGE_REQUEST = 'IS_MESSAGE_REQUEST'\n\nexport const addRequestCount = (requestCount) => {\n    return(dispatch) => {\n        dispatch({type: ADD_REQUEST_COUNT, payload: requestCount})\n    }\n}\n\nexport const isMessageRequest = (isRequestBool) => {\n    return(dispatch) => {\n        dispatch({type: IS_MESSAGE_REQUEST, payload: isRequestBool})\n    }\n}","import styled from 'styled-components'\n\nexport const RequestButtonsContainer = styled.div`\n    display: flex;\n    width: 50vw;\n`\n\nexport const DeleteButton = styled.button`\n    background-color: rgb(40,40,40);\n    color: white;\n    border: none;\n    justify-content: center;\n    &:hover{\n        cursor:pointer\n    }\n`\n\nexport const AcceptButton = styled.button`\n    background-color: rgb(40,40,40);\n    color: white;\n    border: none;\n    justify-content: center;\n    &:hover{\n        cursor:pointer\n    }\n`","import React, { Component } from 'react'\nimport firebase from '../firebase'\nimport { connect } from 'react-redux'\nimport { isInboxTab, isLoop } from '../Redux/actions/inboxActions'\nimport { isMessageRequest } from '../Redux/actions/requestsActions'\nimport { addMessages, addCurrentChatID } from '../Redux/actions/appActions'\nimport { RequestButtonsContainer,\n    DeleteButton,\n    AcceptButton,\n} from '../Styles/RequestButtons.styles'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    userID: state.app.userID,\n    messagesRedux: state.app.messagesRedux,\n    emailRedux: state.app.emailRedux,\n})\n\n\nclass RequestButtons extends Component {\n    clearUnread = (messageID) => {\n        if(this.props.messagesRedux.length>0){\n            const messageRef = firebase.database().ref(`messages/${messageID}`)\n            messageRef.once('value', (snapshot) => {\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,9)\n                messageValues.reverse().splice(0,9)\n                let valueIndex = 0\n                for (let value of messageValues) {\n                    if(value.read===false){\n                        if(value.email !== this.props.emailRedux){\n                            const firebaseMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[valueIndex]}`)\n                            firebaseMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                            valueIndex++\n                        }\n                    }else{\n                        break\n                    }\n                }\n            })\n        }\n    }\n    accept = (input) => {\n        const acceptRef = firebase.database().ref(`messages/${this.props.currentChatIDRedux}`)\n        acceptRef.update({\n            requestStatus: input,\n            lastMessage: Date.now()\n        })\n        // const lastUpdatedRef = firebase.database().ref(`users/${this.props.userID}`)\n        // lastUpdatedRef.update({\n        //     lastUpdated: Date.now()\n        // })\n        if (input===\"accepted\"){\n            this.props.dispatch(isLoop(true))\n            this.clearUnread(this.props.currentChatIDRedux)\n            this.props.dispatch(isInboxTab(true))\n            //this.props.dispatch(addCurrentChatID(null))\n        }else{\n            this.props.dispatch(addMessages([]))\n            this.props.dispatch(addCurrentChatID(null))\n        }\n        this.props.dispatch(isMessageRequest(false))\n    }\n\n    render() {\n        return(\n            <RequestButtonsContainer>\n                <DeleteButton onClick={()=>this.accept('rejected')} className='br2'>Delete</DeleteButton>\n                <AcceptButton onClick={()=>this.accept('accepted')} className='br2'>Accept</AcceptButton>\n            </RequestButtonsContainer>\n        )\n    }\n\n}\n\nexport default connect(mapStateToProps)(RequestButtons)","import styled from 'styled-components';\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: rgb(230,230,230);\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;","import React, { Component } from \"react\"\nimport MessageInput from \"./MessageInput\"\nimport Messages from \"./Messages\"\nimport Scroll from \"./Scroll\" \nimport { \n    MessageContainerStyles, \n    LoadMore, \n    LoadContainer\n} from \"../Styles/MessageContainer.styles\"\nimport { connect } from 'react-redux'\nimport RequestButtons from \"./RequestButtons\"\nimport { \n    addQuantityLoadMessages,\n    preventScrollDown,\n} from '../Redux/actions/appActions'\nimport WithSpinner from '../Spinner/Spinner'\n\nconst MessagesSpinner = WithSpinner(Messages)\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    messagesRedux: state.app.messagesRedux,\n    isMessageRequest: state.requests.isMessageRequest,\n    loadMessagesText: state.app.loadMessagesText,\n    isMessagesLoading: state.app.isMessagesLoading,\n    quantityLoadMessages: state.app.quantityLoadMessages,\n})\n\nclass MessageContainer extends Component {\n\n    loadMoreMessages = () => {\n        const runFunction = async () => {\n            await this.props.dispatch(preventScrollDown(true))\n            await this.props.dispatch(addQuantityLoadMessages(this.props.quantityLoadMessages + 15))\n            await this.props.getMessages(this.props.currentChatIDRedux)\n        }\n        runFunction()\n    }\n\n    render() {\n        return(\n            <div>\n                <MessageContainerStyles className=\"message-container\">\n                    <Scroll height={true}>\n                    {this.props.messagesRedux.length > 23 ? \n                    <LoadContainer>\n                        <LoadMore onClick={this.loadMoreMessages}>{this.props.loadMessagesText}</LoadMore>\n                    </LoadContainer>\n                    :\n                    null\n                    }\n                        <MessagesSpinner\n                        isLoading={this.props.isMessagesLoading} \n                        removeItem={this.props.removeItem} \n                        user={this.props.usernameState}\n                        />\n                        <div id=\"scroll-here\"></div>\n                    </Scroll>\n                </MessageContainerStyles>\n                    {this.props.currentChatIDRedux!==null ? \n                    (this.props.isMessageRequest ? \n                        <RequestButtons />\n                        :\n                        <MessageInput \n                        newMessageRoute={this.props.newMessageRoute}\n                        usernameState={this.props.usernameState}\n                        getMessages={this.props.getMessages} \n                        usernameFunc={this.props.username} \n                        />\n                        )\n                    :\n                    null\n                    }  \n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(MessageContainer)","import React from 'react';\nimport { SpinnerContainer, SpinnerOverlay } from './Spinner.styles';\n\nconst WithSpinner = WrappedComponent => {\n  const Spinner = ({ isLoading, ...otherProps }) => {\n    return isLoading ? (\n      <SpinnerOverlay>\n        <SpinnerContainer />\n      </SpinnerOverlay>\n    ) : (\n      <WrappedComponent {...otherProps} />\n    );\n  };\n  return Spinner;\n};\n\nexport default WithSpinner;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 20,\n  cy: 20,\n  r: 16,\n  fill: \"rgb(26, 26, 26)\"\n});\n\nvar SvgUnreadCircle = function SvgUnreadCircle(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: 40,\n    width: 40,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgUnreadCircle, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/UnreadCircle.8c406109.svg\";\nexport { ForwardRef as ReactComponent };","import styled from \"styled-components\"\nimport { ReactComponent as UnreadCircle } from '../UnreadCircle.svg'\n\nexport const InboxContainer = styled.div`\n    height: 90px;\n    cursor: pointer;\n    border: solid rgb(5,5,5) 1px;\n    background-color: ${props=>(props.isCurrentThread ? \"rgb(100,100,100) \" : \"rgb(40,40,40)\")} ;\n    color: white;\n    display: flex;\n    width: 97%;\n`\n\nexport const ImageContainer = styled.div`\n    width: 25%;\n    float: left;\n    align-items: center;\n`\n\nexport const ProfileImage = styled.img`\n    padding-left: 10px;\n    height: 60px;\n    width: 60px;\n`\n\nexport const MessageContainer = styled.div`\n    float: left;\n    width: 50%;\n    height: 50%;\n`\n\nexport const InboxUser = styled.div`\n    font-size: 20px;\n`\n\nexport const InboxMessage = styled.div`\n    word-wrap:break-word;\n`\n\n\nexport const UndreadContainer = styled.div`\n    float: right;\n    width: 25%;\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nexport const UnreadCircleIcon = styled(UnreadCircle)`\n\n`\n\nexport const UnreadStyles = styled.div`\n    position: absolute;\n`\n\n","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport { \n    InboxMessage, \n    ProfileImage, \n    InboxContainer, \n    UnreadStyles,\n    UndreadContainer, \n    ImageContainer,\n    MessageContainer,\n    InboxUser,\n} from \"../Styles/Inbox.styles\"\nimport { ReactComponent as UnreadCircle } from \"../UnreadCircle.svg\"\nimport { connect } from 'react-redux'\nimport { addAllCurrentUserEmails, addAllCurrentUserIDs, isMessagesLoading } from '../Redux/actions/appActions'\nimport { addRequestCount, isMessageRequest } from \"../Redux/actions/requestsActions\"\nimport { addAllInfoInbox, isLoop } from '../Redux/actions/inboxActions'\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    emailRedux: state.app.emailRedux,\n    isInboxTab: state.inbox.isInboxTab,\n    requestCount: state.requests.requestCount,\n    allInfoInbox: state.inbox.allInfoInbox,\n    messagesRedux: state.app.messagesRedux,\n    userRedux: state.app.userRedux,\n    isLoop: state.inbox.isLoop,\n})\n\nconst compareLastMessageTimestamp = (a, b) => {\n    let comparison = 0\n    if (a.lastMessage < b.lastMessage){\n        comparison = 1\n    } else if (a.lastMessage > b.lastMessage){\n        comparison = -1\n    } \n    return comparison\n}\n\nclass Inbox extends Component {\n\n    state = {\n        messages: [],\n        allInfo: [],\n    }\n\n    getMessageSummaries = () => {\n        const userID = firebase.auth().currentUser\n        const messagesRef = firebase.database().ref(`users/${userID.uid}`)\n        messagesRef.on('value', (snapshot)=> {\n            const messagesSnapshot = snapshot.val()\n            if(messagesSnapshot){\n                if(messagesSnapshot.messages){\n                    let messageInfo = Object.values(messagesSnapshot.messages)\n                    messageInfo = messageInfo.sort(compareLastMessageTimestamp)\n                    let messagesArray = []\n                    let requestArray = []\n                    let allUserIDs = []\n                    let allUserEmails = []\n                    let finalInfoObject = {}\n                    let continueLoop = true\n                    for (let message of messageInfo){\n                        const messageSummary = firebase.database().ref(`messages/${message.messageID}`)\n                        let lastMessage \n                        messageSummary.on('value', (snapshot)=> {\n                            if(snapshot.val()){\n                                let infoObject = {}\n                                lastMessage = Object.values(snapshot.val())\n                                let unreadMessages = Object.values(snapshot.val())\n                                unreadMessages.reverse().splice(0,10)\n                                let unreadCount = 0\n                                for (let unreadMessage of unreadMessages) {\n                                    if(unreadMessage.read===false){\n                                        if(unreadMessage.email!==userID.email){\n                                            unreadCount++\n                                        }\n                                    }else{\n                                        break\n                                    }\n                                }\n                                const otherUserInfo = Object.values(snapshot.val())\n                                let otherUserDisplayName \n                                let otherUserPhotoURL\n                                if (otherUserInfo[otherUserInfo.length-3]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-6]\n                                } else {\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-3]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-1]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-4]\n                                } else {\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-1]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-2]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-5])\n                                } else {\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-2])\n                                }\n                                lastMessage = lastMessage[lastMessage.length-11]\n                                if(lastMessage){\n                                    lastMessage = Object.values(lastMessage)[1]\n                                    if(lastMessage.length+lastMessage.split(\" \").length > 31){\n                                        lastMessage = lastMessage.slice(0, 31)\n                                        lastMessage += \"...\"\n                                    }\n                                }\n                                allUserIDs.push(message.messageID)\n                                infoObject[\"message\"] = lastMessage\n                                infoObject[\"photoURL\"] = otherUserPhotoURL\n                                infoObject[\"displayName\"] = otherUserDisplayName\n                                infoObject[\"unread\"] = unreadCount\n                                if(snapshot.val().requestStatus==='accepted'||snapshot.val().request!==this.props.emailRedux){\n                                    finalInfoObject[message.messageID] = infoObject\n                                    this.setState({\n                                        allInfo: finalInfoObject\n                                    })\n                                    this.props.dispatch(addAllInfoInbox(finalInfoObject))\n                                    messagesArray.push(message.messageID)\n                                }\n                                if(snapshot.val().request===this.props.emailRedux&&snapshot.val().requestStatus==='pending'){\n                                    requestArray.push(message.messageID)\n                                }else{\n                                    if(continueLoop){\n                                    // if(this.props.isLoop){\n                                        console.log(this.props.currentChatIDRedux)\n                                        if(this.props.currentChatIDRedux===null){\n                                            if(snapshot.val().requestStatus!=='rejected'||snapshot.val().request!==this.props.emailRedux){\n                                                this.props.newMessageRoute(message.messageID)\n                                                this.props.dispatch(isLoop(false))\n                                                continueLoop = false\n                                            }\n                                        }\n                                    }\n                                }\n                                this.props.dispatch(addRequestCount(requestArray.length))\n                            }\n                            this.props.dispatch(isMessagesLoading(false))\n                        })\n                        this.props.dispatch(addAllCurrentUserEmails(allUserEmails))\n                        this.props.dispatch(addAllCurrentUserIDs(allUserIDs))\n                    }\n                    if(this.props.messagesRedux.length >=  messagesArray.length+requestArray.length){\n                        if(document.getElementById('scroll-here')){\n                            document.getElementById('scroll-here').scrollIntoView();\n                        }\n                    }\n                    this.setState({\n                        messages: messagesArray,\n                    })\n                }else{\n                    this.props.dispatch(isMessagesLoading(false))\n                }\n            }   \n            this.props.dispatch(isMessagesLoading(false))\n        })\n    } \n\n\n    test = () => {\n        console.log(Object.values(this.state.allInfo))\n    }\n\n    inboxToMessages = (messageID) => {\n        this.props.newMessageRoute(messageID)\n        const messageRef = firebase.database().ref(`messages/${messageID}`)\n        messageRef.on('value', (snapshot) => {\n            if(snapshot.val()){\n                let messages = snapshot.val()\n                let messageKeys = Object.keys(messages)\n                let messageValues = Object.values(messages)\n                messageKeys.reverse().splice(0,8)\n                messageValues.reverse().splice(0,8)\n                messageValues.map((value,index) => {\n                    if(value.read===false){\n                        if(value.email!==this.props.emailRedux){\n                            const updateMessageRef = firebase.database().ref(`messages/${messageID}/${messageKeys[index]}`)\n                            updateMessageRef.update({\n                                read: true,\n                                readTime: Date.now()\n                            })\n                        }\n                    }\n                    return null\n                })\n                document.getElementById('scroll-here').scrollIntoView();\n            }\n        })\n    }\n\n    inboxToMessagesAsync = (messageID) => {\n        if(messageID !== this.props.currentChatIDRedux){\n            const runFunction = async () => {\n                await this.props.dispatch(isMessageRequest(false))\n                await this.inboxToMessages(messageID)\n                await document.getElementById('scroll-here').scrollIntoView();\n            }\n            runFunction()\n        }\n    } \n\n    componentDidMount(){\n        this.props.dispatch(isLoop(true))\n        this.props.dispatch(addRequestCount(0))\n        setTimeout(()=> this.getMessageSummaries(), 100)\n        \n    }\n    \n    render() {\n        return(\n            <div>\n                {Object.values(this.props.allInfoInbox).map((message, index)=> {\n                    return(\n                        <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatIDRedux===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessagesAsync(this.state.messages[index])} key={index}>\n                            <ImageContainer>\n                                <ProfileImage alt=\"user profile\" src={message.photoURL}></ProfileImage>\n                            </ImageContainer>\n                            <MessageContainer>\n                                <InboxUser>{message.displayName}</InboxUser>\n                                <InboxMessage >{message.message}</InboxMessage>\n                            </MessageContainer>\n                            {message.unread > 0 ? \n                                <UndreadContainer>\n                                    <UnreadCircle></UnreadCircle>\n                                    <UnreadStyles>{message.unread}</UnreadStyles>\n                                </UndreadContainer>\n                            :\n                            null\n                            }\n                        </InboxContainer>\n                    )\n                    })\n                }\n                </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Inbox)","import React, { Component } from \"react\"\nimport firebase from \"../firebase\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport { \n    InboxMessage, \n    ProfileImage, \n    InboxContainer,  \n    ImageContainer,\n    MessageContainer,\n    InboxUser,\n} from \"../Styles/Inbox.styles\"\nimport { connect } from 'react-redux'\nimport { addAllCurrentUserEmails, \n    addAllCurrentUserIDs, \n    // addCurrentChatID \n} from '../Redux/actions/appActions'\nimport { isMessageRequest } from \"../Redux/actions/requestsActions\"\n\nconst mapStateToProps = (state) => ({\n    currentChatIDRedux: state.app.currentChatIDRedux,\n    emailRedux: state.app.emailRedux,\n    isInboxTab: state.inbox.isInboxTab,\n})\n\nconst compareLastMessageTimestamp = (a, b) => {\n    let comparison = 0\n    if (a.lastMessage < b.lastMessage){\n        comparison = 1\n    } else if (a.lastMessage > b.lastMessage){\n        comparison = -1\n    } \n    return comparison\n}\n\nclass Inbox extends Component {\n\n    state = {\n        messages: [],\n        allInfo: [],\n    }\n\n    getMessageSummaries = () => {\n        const userID = firebase.auth().currentUser\n        const messagesRef = firebase.database().ref(`users/${userID.uid}`)\n        messagesRef.on('value', (snapshot)=> {\n            const messagesSnapshot = snapshot.val()\n            if(messagesSnapshot){\n                if(messagesSnapshot.messages){\n                    let messageInfo = Object.values(messagesSnapshot.messages)\n                    messageInfo = messageInfo.sort(compareLastMessageTimestamp)\n                    let messagesArray = []\n                    let allUserIDs = []\n                    let allUserEmails = []\n                    let finalInfoObject = {}\n                    for (let message of messageInfo){\n                        const messageSummary = firebase.database().ref(`messages/${message.messageID}`)\n                        let lastMessage \n                        messageSummary.on('value', (snapshot)=> {\n                            if(snapshot.val()){\n                                let infoObject = {}\n                                lastMessage = Object.values(snapshot.val())\n                                let unreadCount = 0\n                                const otherUserInfo = Object.values(snapshot.val())\n                                let otherUserDisplayName \n                                let otherUserPhotoURL\n                                if (otherUserInfo[otherUserInfo.length-3]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-6]\n                                } else if (otherUserInfo[otherUserInfo.length-6]===userID.displayName){\n                                    otherUserDisplayName = otherUserInfo[otherUserInfo.length-3]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-1]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-4]\n                                } else if(otherUserInfo[otherUserInfo.length-4]===userID.photoURL){\n                                    otherUserPhotoURL = otherUserInfo[otherUserInfo.length-1]\n                                }\n                                if(otherUserInfo[otherUserInfo.length-2]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-5])\n                                } else if(otherUserInfo[otherUserInfo.length-5]===userID.email){\n                                    allUserEmails.push(otherUserInfo[otherUserInfo.length-2])\n                                }\n                                lastMessage = lastMessage[lastMessage.length-11]\n                                if(lastMessage){\n                                    lastMessage = Object.values(lastMessage)[1]\n                                    if(lastMessage.length+lastMessage.split(\" \").length > 31){\n                                        lastMessage = lastMessage.slice(0, 31)\n                                        lastMessage += \"...\"\n                                    }\n                                }\n                                allUserIDs.push(message.messageID)\n                                infoObject[\"message\"] = lastMessage\n                                infoObject[\"photoURL\"] = otherUserPhotoURL\n                                infoObject[\"displayName\"] = otherUserDisplayName\n                                infoObject[\"unread\"] = unreadCount\n                                if(snapshot.val().request===this.props.emailRedux&&snapshot.val().requestStatus==='pending'){\n                                    finalInfoObject[message.messageID] = infoObject\n                                    this.setState({\n                                        allInfo: finalInfoObject\n                                    })\n                                    messagesArray.push(message.messageID)\n                                }\n                            }\n                            if(document.getElementById('scroll-here')){\n                                document.getElementById('scroll-here').scrollIntoView();\n                            }\n                        })\n                        this.props.dispatch(addAllCurrentUserEmails(allUserEmails))\n                        this.props.dispatch(addAllCurrentUserIDs(allUserIDs))\n                    }\n                    this.setState({\n                        messages: messagesArray,\n                    })\n                }\n            }\n                \n        })\n    } \n\n    test = () => {\n    }\n\n    inboxToMessagesAsync = (messageID) => {\n        const runFunction = async () => {\n            await this.props.dispatch(isMessageRequest(true))\n            await this.props.newMessageRoute(messageID, 'requests')\n            await document.getElementById('scroll-here').scrollIntoView();\n        }\n        runFunction()\n    } \n\n    componentDidMount(){\n        this.getMessageSummaries()\n    }\n    \n    render() {\n        return(\n            <div>\n                {/* <button onClick={(this.test)}>push</button> */}\n                {this.state.messages.length > 0 \n                ?\n                <div>\n                    \n                    {this.props.isInboxTab ? \n                    null\n                    :\n                        Object.values(this.state.allInfo).map((message, index)=> {\n                            return(\n                                <InboxContainer className=\"br3 pa3 ma2\" isCurrentThread={this.props.currentChatIDRedux===this.state.messages[index] ? true : false} onClick={()=>this.inboxToMessagesAsync(this.state.messages[index])} key={index}>\n                                    <ImageContainer>\n                                        <ProfileImage alt=\"user profile\" src={message.photoURL}></ProfileImage>\n                                    </ImageContainer>\n                                    <MessageContainer>\n                                        <InboxUser>{message.displayName}</InboxUser>\n                                        <InboxMessage >{message.message}</InboxMessage>\n                                    </MessageContainer>\n                                </InboxContainer>\n                                )\n                        })\n                    \n                    }\n                </div>\n                :\n                null\n                }\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Inbox)","import styled from \"styled-components\"\n\nexport const InboxContainerStyle = styled.div`\n    @media (max-width: 900px) {\n        width: 100vw;\n        height: 86vh; \n    }\n    @media (min-width: 900px) {\n        width: 400px;\n        height: 200px; \n    }\n`\n\nexport const TabsContainer = styled.div`\n    display: flex;\n    color: white;\n    justify-content: space-evenly;\n`\n\nexport const InboxTab = styled.div`\n    &:hover {\n        cursor: pointer\n    };\n    text-decoration: ${props=> (props.isSelected ? 'underline' : 'null')}\n`\n\nexport const RequestsTab = styled.div`\n    &:hover {\n        cursor: pointer;\n    };\n    text-decoration: ${props=> (props.isSelected ? 'null' : 'underline')}\n`","import React from \"react\"\nimport Inbox from \"./Inbox\"\nimport Requests from './Requests'\nimport { InboxContainerStyle } from \"../Styles/InboxContainer.styles\"\nimport Scroll from \"./Scroll\"\nimport { connect } from 'react-redux'\nimport { isInboxTab } from \"../Redux/actions/inboxActions\"\nimport { TabsContainer,\n    InboxTab,\n    RequestsTab, \n} from '../Styles/InboxContainer.styles'\n// import { ScrollStyles } from '../Styles/Scroll.styles'\n\nconst mapStateToProps = (state) => ({\n    isInboxTab: state.inbox.isInboxTab,\n    requestCount: state.requests.requestCount\n})\n\nconst InboxContainer = (props) => {\n    return(\n        <div>\n            <TabsContainer>\n                <InboxTab isSelected={props.isInboxTab} onClick={()=>props.dispatch(isInboxTab(true))}>Inbox</InboxTab>\n                <RequestsTab isSelected={props.isInboxTab} onClick={()=>props.dispatch(isInboxTab(false))}>Requests ({props.requestCount})</RequestsTab>\n            </TabsContainer>\n            {props.isInboxTab ? \n            <Scroll height={false}>\n                <InboxContainerStyle>\n                    <Inbox \n                    newMessageRoute={props.newMessageRoute}\n                    />\n                </InboxContainerStyle>\n            </Scroll>\n            :\n            <Scroll height={false}>\n                <InboxContainerStyle>\n                    <Requests \n                    newMessageRoute={props.newMessageRoute}\n                    />\n                </InboxContainerStyle>\n            </Scroll> \n            }\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps)(InboxContainer)","import styled from \"styled-components\"\n\nexport const NewMessageButton = styled.button`\n    height: 35px;\n    width: 40px;\n    cursor: pointer;\n    background-color: rgb(50,50,50);\n    color: white;\n    border: none;\n`\n\nexport const NewMessageInput = styled.input`\n    height: 30px;\n    width: 250px;\n    cursor: pointer;\n    background-color: gray;\n    color: white;\n    border: none;\n    margin: 0 5px 0 10px;\n`\n\nexport const NewMessageContainer = styled.div`\n    color: white;\n`","import React, { Component } from \"react\"\n// import firebase from \"./firebase\"\nimport { NewMessageButton, NewMessageInput, NewMessageContainer } from \"../Styles/NewMessage.styles\"\nimport { connect } from 'react-redux'\nimport { addMessages } from '../Redux/actions/appActions'\nimport { addCurrentChatID, addNewMessageOtherUserEmail } from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n    allUserEmailsRedux: state.app.allUserEmailsRedux,\n    emailRedux: state.app.emailRedux,\n    allCurrentUserEmailsRedux: state.app.allCurrentUserEmailsRedux,\n    allCurrentUserIDsRedux: state.app.allCurrentUserIDsRedux,\n})\n\nclass NewMessage extends Component {\n\n    state = {\n        email: \"\",\n        isUserExist: \"\",\n    }\n\n    handleEmail = (e) => {\n        this.setState({\n            email: e.target.value\n        })\n    }\n\n    createNewMessage = () => {\n        if(this.state.email.length>0){\n            const emailIndex = this.props.allCurrentUserEmailsRedux.indexOf(this.state.email)\n            if(emailIndex!==-1){\n                this.props.getMessages(this.props.allCurrentUserIDsRedux[emailIndex])\n                this.props.dispatch(addCurrentChatID(this.props.allCurrentUserIDsRedux[emailIndex]))\n                if(this.state.isUserExist===\"user does not exist\"){\n                    this.setState({\n                        isUserExist: \"\",\n                    })\n                }\n            }else{\n                for(let email of this.props.allUserEmailsRedux) {\n                    if(this.state.email===this.props.emailRedux){\n                        break\n                    }else if(email===this.state.email){\n                        this.props.dispatch(addMessages([]))\n                        this.props.dispatch(addCurrentChatID('NEW MESSAGE'))\n                        this.props.dispatch(addNewMessageOtherUserEmail(this.state.email))\n                        this.setState({\n                            isUserExist: \"\"\n                        })\n                        document.getElementById(\"email-input\").value=\"\"\n                        break\n                    }else{\n                        this.setState({\n                            isUserExist: \"user does not exist\"\n                        })\n                    }\n                }\n            }\n        }\n    }\n\n    render() {\n        return(\n            <NewMessageContainer>\n                {/* New Message */}\n                <NewMessageInput className=\"br2\" id=\"email-input\" onChange={this.handleEmail} placeholder=\"enter email\"></NewMessageInput>\n                <NewMessageButton className=\"br2\" onClick={this.createNewMessage}>+</NewMessageButton>\n                <div>{this.state.isUserExist}</div>\n            </NewMessageContainer>\n        )\n    }\n} \n\nexport default connect(mapStateToProps)(NewMessage) ","import styled from \"styled-components\"\n\nexport const MobileContainer = styled.div`\n    @media (min-width: 900px){\n        display: none;\n    }\n`\n\nexport const ChatButtonsMobile = styled.div`\n    @media (min-width: 900px) {\n        display: none;\n    }\n`\n\nexport const AppContainer = styled.div`\n    width: 100%;\n`\n\nexport const LogOutButton = styled.button`\n    border: none;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(80, 80, 80);\n    margin: 5px 5px 5px 10px;\n`\n\nexport const LogInButton = styled.button`\n    border: none;\n    height: 5vh;\n    width: 20vw;\n    min-width: 200px;\n    color: white;\n    cursor: pointer;\n    background-color: rgb(18, 208, 255);\n    position: absolute;\n    top: 55%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-family: 'Lato';\n    font-size:calc(12px + 1vw);\n    &:hover {\n        background-color: green;\n    }\n`\n\nexport const InboxMessageContainer = styled.div`\n    display: flex;\n`\n\nexport const AppTitle = styled.div`\n    font-size: calc(8px + 3vw);\n    color: white;\n    font-family: 'Lato';\n    position: absolute;\n    top: 45%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`\n\nexport const HomepageContainer = styled.div`\n`\n\nexport const InboxMobile = styled.div`\n    @media (max-width: 900px) {\n        display: none;\n    }\n    display: flex;\n`","import styled from 'styled-components'\n\nexport const ErrorContainer = styled.div`\n`\n\nexport const ImageContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100%\n    height: 100%\n`\n\nexport const Image404 = styled.img`\n    max-width: 50%;\n    max-height: 50%\n    display: flex;\n    align-self: center;\n`\n\nexport const TextContainer = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nexport const ErrorText = styled.div`\n    color: white;\n    font-family: 'Lato', sans-serif;\n`","import React, { Component } from 'react'\nimport { Image404, \n    ErrorText, \n    ErrorContainer,  \n    TextContainer,\n    ImageContainer,\n} from '../Styles/ErrorBoundary.styles'\nimport photo404 from '../9.png'\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true }\n    }\n\n    componentDidCatch(error, info){\n        console.log(error)\n    }\n\n    render(){\n        if(this.state.hasError) {\n            return(\n                <ErrorContainer>\n                    <TextContainer>\n                        <ErrorText>Something went wrong</ErrorText>\n                    </TextContainer>\n                    <ImageContainer>\n                        <Image404 src={photo404}></Image404>\n                    </ImageContainer>\n                </ErrorContainer>\n            )\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary","import React, { Component } from 'react';\nimport InboxChatButtons from './InboxChatButtons'\nimport firebase, {auth, provider} from \"../firebase\"\nimport MessageContainer from \"./MessageContainer\"\nimport InboxContainer from \"./InboxContainer\"\nimport NewMessage from \"./NewMessage\"\nimport { AppContainer, \n  LogInButton, \n  InboxMessageContainer, \n  AppTitle,\n  LogOutButton,\n  HomepageContainer,\n  InboxMobile,\n  ChatButtonsMobile,\n  MobileContainer,\n} from \"../Styles/App.styles\"\nimport { connect } from 'react-redux'\nimport ErrorBoundary from './ErrorBoundary'\nimport { \n  addUser,\n  addUserID,\n  addCurrentChatID,\n  addEmail,\n  addNewMessageOtherUserEmail,\n  addAllUserEmails,\n  addAllCurrentUserIDs,\n  addAllCurrentUserEmails,\n  addMessages,\n  preventScrollDown,\n  loadMessagesText,\n  isMessagesLoading,\n  addQuantityLoadMessages,\n} from '../Redux/actions/appActions'\n\nconst mapStateToProps = (state) => ({\n  messagesRedux: state.app.messagesRedux,\n  userRedux: state.app.userRedux,\n  currentChatIDRedux: state.app.currentChatIDRedux,\n  isMessageRequest: state.requests.isMessageRequest,\n  emailRedux: state.app.emailRedux,\n  quantityLoadMessages: state.app.quantityLoadMessages,\n  preventScrollDown: state.app.preventScrollDown,\n})\n\nclass App extends Component {\n  state = {\n    username: \"\",\n    showLogInButton: false,\n    isMessagesLoading: true,\n    isChat: true\n  }\n  \n  username = (e) => {\n    this.setState({\n      username: e.target.value\n    })\n  }\n  \n  stayLoggedIn = () => {\n    auth.onAuthStateChanged((user)=> {\n      if(user){\n        this.setState({\n          username: user.displayName,\n        })\n        this.props.dispatch(addEmail(user.email))\n        this.props.dispatch(addUserID(user.uid))\n        this.props.dispatch(addUser(user))\n        this.getUserInfo()\n      }else{\n        this.setState({\n          showLogInButton: true,\n        })\n      }\n    })\n  }\n\n  getUserInfo = () => {\n    const itemRef = firebase.database().ref(\"users\")\n    itemRef.on('value', (snapshot) => {\n      let users = snapshot.val()\n      let usersArray = []\n      for (let userId in users){\n        usersArray.push(users[userId].email)\n      }\n      this.props.dispatch(addAllUserEmails(usersArray))\n    })\n  }\n  \n  componentDidMount() {\n    this.stayLoggedIn()\n    // this.addUserDataTemp(\"bob\", \"bill@cyan.com\", \"https://lh3.googleusercontent.com/a-/AOh14GiEWMCD6XAm34qOIe9A3LcvcHcPToUSdOroPHcb\")\n  }\n\n  addUserDataTemp = (name, email, photoURL) => {\n    const userData = {\n      name: name,\n      email: email,\n      dateCreated: Date.now(),\n      photoURL: photoURL,\n    }\n    firebase.database().ref(`users`).push(userData)\n  }\n\n  addUserData = (name, email, uid, photoURL) => {\n    const userData = {\n      name: name,\n      email: email,\n      dateCreated: Date.now(),\n      photoURL: photoURL,\n    }\n    firebase.database().ref(`users/${uid}`).set(userData)\n  }\n  \n  removeItem = (itemId) => {\n    const itemRef = firebase.database().ref(`/messages/${this.props.currentChatIDRedux}/${itemId}`)\n    itemRef.remove()\n  }\n  \n  logout = () => {\n    auth.signOut()\n    this.props.dispatch(addMessages([]))\n    this.props.dispatch(addAllCurrentUserIDs([]))\n    this.props.dispatch(addAllCurrentUserEmails([]))\n    this.props.dispatch(addAllUserEmails([]))\n    this.props.dispatch(addNewMessageOtherUserEmail(''))\n    this.props.dispatch(addEmail(''))\n    this.props.dispatch(addCurrentChatID(null))\n    this.props.dispatch(addUser(null))\n    this.props.dispatch(addUserID(''))\n  }\n\n  getMessages = (id) => {\n    const itemRef = firebase.database().ref(`messages/${id}`)\n    let limitMessages = itemRef.orderByKey().limitToLast(this.props.quantityLoadMessages)\n    limitMessages.on('value', (snapshot) => {\n      let items = snapshot.val()\n      let newState = []\n      if(items){\n        if(items['requestStatus']==='accepted'||items['request']!==this.props.emailRedux||(items['request']===this.props.emailRedux&&items['requestStatus']==='pending')){\n          for (let item in items) {\n            newState.push({\n              itemId: item,\n              user: items[item].user,\n              message: items[item].message,\n              email: items[item].email,\n              sent: items[item].sent,\n              read: items[item].read,\n              readTime: items[item].readTime,\n            })\n          }\n          if(this.props.messagesRedux){\n            if(items.messageCount === (newState.length-10)){\n              this.props.dispatch(loadMessagesText('No more messages'))\n            }\n          }\n          if(this.props.currentChatIDRedux===snapshot.ref_.path.pieces_[1]||this.props.currentChatIDRedux===id){\n            this.props.dispatch(addMessages(newState))\n          }\n        }\n      }\n      this.props.dispatch(isMessagesLoading(false))\n    })\n    if(!this.props.preventScrollDown){\n      if (document.getElementById('scroll-here')){\n        document.getElementById('scroll-here').scrollIntoView()\n      }\n      this.props.dispatch(preventScrollDown(false))\n    }\n  }\n\n  login = () => {\n    auth.signInWithPopup(provider)\n    .then((result) => {\n      const user = result.user\n      this.setState({\n        user,\n        username: user.displayName\n      })\n      const userRef = firebase.database().ref(\"users\")\n      userRef.once('value', (snapshot)=>{\n        let users = snapshot.val()\n        let counter = 0\n        for (const userData in users){\n          if (users[userData].email===user.email){\n            counter++\n          }\n        }\n        if(counter===0){\n          this.addUserData(user.displayName, user.email, user.uid, user.photoURL)\n        }\n      })\n      this.getUserInfo()\n    })\n  }\n\n  scrollDown = () => {\n    if (document.getElementById('scroll-here')){\n      document.getElementById('scroll-here').scrollIntoView()\n    }\n  }\n\n  newMessageRoute = (input) => {\n    if (input !== this.props.currentChatIDRedux){\n      const route = async (input) => {\n        await this.props.dispatch(addCurrentChatID(input))\n        await this.props.dispatch(addQuantityLoadMessages(24))\n        await this.getMessages(input)\n        await this.props.dispatch(loadMessagesText('Load more messages'))\n        await this.scrollDown()\n      }\n      route(input)\n    }\n  }\n\n  test = () => {\n  }\n\n  isChat = (bool) => {\n    this.setState({\n      isChat: bool\n    })\n  }\n\n  render(){\n    return (\n      <AppContainer>\n        <ErrorBoundary>\n          {/* <button onClick={this.test}>clear</button> */}\n          {this.props.userRedux ?\n            <LogOutButton className=\"br1 br3 pa2 ma1 dib\" onClick={this.logout}>\n              Log Out | {this.state.username}\n            </LogOutButton>             \n            :\n            (\n              this.state.showLogInButton ? \n            <HomepageContainer>\n              <AppTitle>Messaging App</AppTitle>\n              <LogInButton onClick={this.login}>LOG IN</LogInButton>              \n            </HomepageContainer>\n              :\n              null\n            )\n          }\n          {this.props.userRedux ? \n          <div>\n            <NewMessage \n            getMessages={this.getMessages}\n            newMessageRoute={this.newMessageRoute}\n            />\n            <ChatButtonsMobile>\n              <InboxChatButtons isChat={this.isChat} isChatState={this.state.isChat} />\n            </ChatButtonsMobile>\n            <InboxMessageContainer>\n              <InboxMobile>\n                <InboxContainer newMessageRoute={this.newMessageRoute} />\n                <MessageContainer \n                newMessageRoute={this.newMessageRoute}\n                getMessages={this.getMessages}\n                usernameFunc={this.username}\n                usernameState={this.state.username}\n                removeItem={this.removeItem}\n                />\n              </InboxMobile>\n              <MobileContainer>\n                {this.state.isChat ? \n                <MessageContainer \n                newMessageRoute={this.newMessageRoute}\n                getMessages={this.getMessages}\n                usernameFunc={this.username}\n                usernameState={this.state.username}\n                removeItem={this.removeItem}\n                />\n                :\n                <InboxContainer \n                newMessageRoute={this.newMessageRoute}\n                />\n                }\n              </MobileContainer>\n            </InboxMessageContainer>\n          </div>\n          :\n          null\n          }\n        </ErrorBoundary>\n      </AppContainer>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\"\n\nexport const IndexContainer = styled.div`\n    // background-color: rgb(28,28,28);\n    background-color: rgb(18,18,23)\n    color: white;\n`","import * as actions from '../actions/appActions'\n\nexport const initialState = {\n    userRedux: '',\n    userIDRedux: '',\n    currentChatIDRedux: null,\n    emailRedux: '',\n    newMessageOtherUserEmailRedux: '',\n    allUserEmailsRedux: [],\n    allCurrentUserEmailsRedux: [],\n    allCurrentUserIDsRedux: [],\n    messagesRedux: [],\n    quantityLoadMessages: 24,\n    preventScrollDown: false,\n    loadMessagesText: 'Load more messages',\n    isMessagesLoading: true,\n}\n\nexport default function appReducer(state=initialState, action) {\n    switch(action.type){\n        case actions.IS_MESSAGES_LOADING:\n            return {...state, isMessagesLoading: action.payload}\n        case actions.LOAD_MESSAGES_TEXT:\n            return{...state, loadMessagesText: action.payload}\n        case actions.PREVENT_SCROLL_DOWN:\n            return{...state, preventScrollDown: action.payload}\n        case actions.ADD_QUANTITY_LOAD_MESSAGES:\n            return{...state, quantityLoadMessages: action.payload}\n        case actions.ADD_MESSAGES:\n            return {...state, messagesRedux: action.payload}\n        case actions.ADD_ALL_CURRENT_USER_IDS:\n            return {...state, allCurrentUserIDsRedux: action.payload}\n        case actions.ADD_ALL_CURRENT_USER_EMAILS:\n            return{...state, allCurrentUserEmailsRedux: action.payload}\n        case actions.ADD_ALL_USER_EMAILS:\n            return {...state, allUserEmailsRedux: action.payload}\n        case actions.ADD_NEW_MESSAGE_OTHER_USER_EMAIL:\n            return {...state, newMessageOtherUserEmailRedux: action.payload}\n        case actions.ADD_EMAIL:\n            return {...state, emailRedux: action.payload}\n        case actions.ADD_CURRENT_CHAT_ID:\n            return {...state, currentChatIDRedux: action.payload}\n        case actions.ADD_USER:\n            return {...state, userRedux: action.payload}\n        case actions.ADD_USERID:\n            return{...state, userID: action.payload}\n        default:\n            return state\n    }\n}","import * as actions from '../actions/inboxActions'\n\nconst initialState = {\n    isInboxTab: true,\n    allInfoInbox: [],\n    isLoop: true,\n}\n\nexport default function inboxReducer(state=initialState, action){\n    switch(action.type){\n        case actions.IS_LOOP:\n            return{...state, isLoop: action.payload}\n        case actions.IS_INBOX_TAB:\n            return {...state, isInboxTab: action.payload}\n        case actions.ADD_ALL_INFO_INBOX:\n            return{...state, allInfoInbox: action.payload}\n        default:\n            return state\n    }\n}\n","export const ADD_INBOX_MESSAGES = \"ADD_INBOX_MESSAGES\"\nexport const ADD_ALL_INFO = 'ADD_ALL_INFO'\n\nexport const addInboxMessages = (messages) => {\n    return (dispatch) => {\n        dispatch({type: ADD_INBOX_MESSAGES, payload: messages})\n    }\n}\n\nexport const addAllInfo = (allInfo) => {\n    return(dispatch)=> {\n        dispatch({type: ADD_ALL_INFO, payload: allInfo})\n    }\n}","import * as actions from '../actions/inboxContainerActions'\n\nexport const initialState = {\n    messagesInboxRedux: [],\n    allInfoRedux: [],\n}\n\nexport default function inboxContainerReducer(state=initialState, action) {\n    switch (action.type){\n        case actions.ADD_INBOX_MESSAGES:\n            return {...state, messagesInboxRedux: action.payload}\n        case actions.ADD_ALL_INFO:\n            return {...state, allInfoRedux: action.payload}\n        default:\n            return state\n    }\n}\n","import * as actions from '../actions/requestsActions'\n\nexport const initialState = {\n    requestCount: 0,\n    isMessageRequest: false,\n}\n\nexport default function requestsReducer(state=initialState, action) {\n    switch(action.type) {\n        case actions.ADD_REQUEST_COUNT:\n            return {...state, requestCount: action.payload}\n        case actions.IS_MESSAGE_REQUEST:\n            return {...state, isMessageRequest: action.payload}\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport appReducer from './appReducer'\nimport inboxReducer from './inboxReducer'\nimport inboxContainerReducer from './inboxContainerReducer'\nimport requestsReducer from './requestsReducer'\n\nconst rootReducer = combineReducers ({\n    app: appReducer,\n    inbox: inboxReducer,\n    inboxContainer: inboxContainerReducer,\n    requests: requestsReducer,\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { IndexContainer } from \"./Styles/Index.styles\"\nimport 'tachyons';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\"\nimport rootReducer from './Redux/reducers/rootReducer'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <IndexContainer>\n        <App />\n      </IndexContainer>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}